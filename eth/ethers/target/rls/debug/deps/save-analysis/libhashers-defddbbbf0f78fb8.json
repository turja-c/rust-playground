{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1","program":"/Users/turjachowdhury/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","hashers","/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=defddbbbf0f78fb8","-C","extra-filename=-defddbbbf0f78fb8","--out-dir","/Users/turjachowdhury/GitHub/rust-playground/eth/ethers/target/rls/debug/deps","-L","dependency=/Users/turjachowdhury/GitHub/rust-playground/eth/ethers/target/rls/debug/deps","--extern","fxhash=/Users/turjachowdhury/GitHub/rust-playground/eth/ethers/target/rls/debug/deps/libfxhash-35efe612aa2accb2.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/turjachowdhury/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/turjachowdhury/GitHub/rust-playground/eth/ethers/target/rls/debug/deps/libhashers-defddbbbf0f78fb8.rmeta"},"prelude":{"crate_id":{"name":"hashers","disambiguator":[17553587930370171863,0]},"crate_root":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src","external_crates":[{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3177202280525429736,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14771084576412554041,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2214913233095760658,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14062411168213242900,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12076482825092298057,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[14222321261015582298,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8777242437552039366,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17835652209006724865,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[8739993533421390330,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[14051958152740382928,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[10065303707608660519,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[11544620977869425193,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[6400271788769952154,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[15384311983005613458,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[18308402029100966730,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[6407954677654987270,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[15697432329694890830,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[8370702540642071065,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[13043233986326649044,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":20,"id":{"name":"fxhash","disambiguator":[17932974859781817456,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","num":21,"id":{"name":"byteorder","disambiguator":[17568044588112060419,0]}}],"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":0,"byte_end":16535,"line_start":1,"line_end":464,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":10420},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10785,"byte_end":10798,"line_start":276,"line_end":276,"column_start":41,"column_end":54},"alias_span":null,"name":"DefaultHasher","value":"","parent":{"krate":0,"index":133}},{"kind":"Use","ref_id":{"krate":20,"index":92},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12210,"byte_end":12218,"line_start":321,"line_end":321,"column_start":22,"column_end":30},"alias_span":null,"name":"FxHasher","value":"","parent":{"krate":0,"index":140}},{"kind":"Use","ref_id":{"krate":20,"index":104},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12220,"byte_end":12230,"line_start":321,"line_end":321,"column_start":32,"column_end":42},"alias_span":null,"name":"FxHasher32","value":"","parent":{"krate":0,"index":140}},{"kind":"Use","ref_id":{"krate":20,"index":98},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12232,"byte_end":12242,"line_start":321,"line_end":321,"column_start":44,"column_end":54},"alias_span":null,"name":"FxHasher64","value":"","parent":{"krate":0,"index":140}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":0,"byte_end":16535,"line_start":1,"line_end":464,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":94},{"krate":0,"index":108},{"krate":0,"index":133},{"krate":0,"index":140},{"krate":0,"index":154},{"krate":0,"index":171}],"decl_id":null,"docs":" # hashers","sig":null,"attributes":[{"value":"/ # hashers","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":0,"byte_end":13,"line_start":1,"line_end":1,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14,"byte_end":17,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module contains implementations and re-exports of a number of","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":18,"byte_end":88,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"/ (non-cryptographic) hashing functions suitable for use with Rust's","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":89,"byte_end":159,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/ HashMap and HashSet.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":160,"byte_end":184,"line_start":5,"line_end":5,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":185,"byte_end":188,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Additionally, there are benchmarks of the hash functions and a","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":189,"byte_end":255,"line_start":7,"line_end":7,"column_start":1,"column_end":67}},{"value":"/ couple of statistical tests for hash quality.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":256,"byte_end":305,"line_start":8,"line_end":8,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":306,"byte_end":309,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Disclaimer","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":310,"byte_end":326,"line_start":10,"line_end":10,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":327,"byte_end":330,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ To quote [fxhash](https://github.com/cbreeden/fxhash),","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":331,"byte_end":389,"line_start":12,"line_end":12,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":390,"byte_end":393,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ > [None of these are] cryptographically secure hash, so it is strongly","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":394,"byte_end":468,"line_start":14,"line_end":14,"column_start":1,"column_end":75}},{"value":"/ > recommended that you do not use this hash for cryptographic","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":469,"byte_end":534,"line_start":15,"line_end":15,"column_start":1,"column_end":66}},{"value":"/ > purproses. Furthermore, this hashing algorithm was not designed to","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":535,"byte_end":607,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ > prevent any attacks for determining collisions which could be used","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":608,"byte_end":680,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ > to potentially cause quadratic behavior in HashMaps. So it is not","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":681,"byte_end":752,"line_start":18,"line_end":18,"column_start":1,"column_end":72}},{"value":"/ > recommended to expose this hash in places where collissions or DDOS","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":753,"byte_end":826,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/ > attacks may be a concern.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":827,"byte_end":858,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":859,"byte_end":862,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # What's a Hasher?","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":863,"byte_end":885,"line_start":22,"line_end":22,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":886,"byte_end":889,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ A hash function, for our purposes here, is a function that takes as","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":890,"byte_end":961,"line_start":24,"line_end":24,"column_start":1,"column_end":72}},{"value":"/ input another, general, value, and returns a number that is","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":962,"byte_end":1025,"line_start":25,"line_end":25,"column_start":1,"column_end":64}},{"value":"/ ideally unique to that value. This number can be used to","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1026,"byte_end":1086,"line_start":26,"line_end":26,"column_start":1,"column_end":61}},{"value":"/ store the value in an array and then locate it again later","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1087,"byte_end":1149,"line_start":27,"line_end":27,"column_start":1,"column_end":63}},{"value":"/ without searching the array; in other words, in O(1) time. More or","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1150,"byte_end":1220,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/ less: there are a lot of other details. For more information, see","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1221,"byte_end":1290,"line_start":29,"line_end":29,"column_start":1,"column_end":70}},{"value":"/ Rust's HashMap and various information sources online.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1291,"byte_end":1349,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1350,"byte_end":1353,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ In Rust specifically, std::hash::Hasher is a trait:","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1354,"byte_end":1409,"line_start":32,"line_end":32,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1410,"byte_end":1413,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1414,"byte_end":1425,"line_start":34,"line_end":34,"column_start":1,"column_end":12}},{"value":"/ pub trait Hasher {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1426,"byte_end":1448,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"/     fn finish(&self) -> u64;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1449,"byte_end":1481,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/     fn write(&mut self, bytes: &[u8]);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1482,"byte_end":1524,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/ ","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1525,"byte_end":1529,"line_start":38,"line_end":38,"column_start":1,"column_end":5}},{"value":"/     fn write_u8(&mut self, i: u8) { ... }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1530,"byte_end":1575,"line_start":39,"line_end":39,"column_start":1,"column_end":46}},{"value":"/     fn write_u16(&mut self, i: u16) { ... }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1576,"byte_end":1623,"line_start":40,"line_end":40,"column_start":1,"column_end":48}},{"value":"/     ...","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1624,"byte_end":1635,"line_start":41,"line_end":41,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1636,"byte_end":1641,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1642,"byte_end":1649,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1650,"byte_end":1653,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Hasher has two required methods, `finish` and `write`, and default implementations of other","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1654,"byte_end":1749,"line_start":45,"line_end":45,"column_start":1,"column_end":96}},{"value":"/ useful methods like `write_u8` and `write_u16`, implemented by calling `write`. In use, an","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1750,"byte_end":1844,"line_start":46,"line_end":46,"column_start":1,"column_end":95}},{"value":"/ implementation of Hasher is created, data is fed to it using the various `write` methods, then","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1845,"byte_end":1943,"line_start":47,"line_end":47,"column_start":1,"column_end":99}},{"value":"/ the result is returned using the `finish` method to get the hash number out.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":1944,"byte_end":2024,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2025,"byte_end":2028,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Using a custom hash function in Rust","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2029,"byte_end":2071,"line_start":50,"line_end":50,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2072,"byte_end":2075,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ Using a custom hash function with Rust's HashMap or HashSet has long been regarded as a deep","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2076,"byte_end":2172,"line_start":52,"line_end":52,"column_start":1,"column_end":97}},{"value":"/ mystery. Now, I will strip back the curtains of ignorance and reveal the secrets in all their","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2173,"byte_end":2270,"line_start":53,"line_end":53,"column_start":1,"column_end":98}},{"value":"/ unholy glory!","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2271,"byte_end":2288,"line_start":54,"line_end":54,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2289,"byte_end":2292,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Or something like that. It's not really a big deal.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2293,"byte_end":2348,"line_start":56,"line_end":56,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2349,"byte_end":2352,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ There are two ways to create a HashMap that uses a custom Hasher implementation: setting the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2353,"byte_end":2449,"line_start":58,"line_end":58,"column_start":1,"column_end":97}},{"value":"/ hasher on a hash-map instance, and type-level hackery.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2450,"byte_end":2508,"line_start":59,"line_end":59,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2509,"byte_end":2512,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ## Explicitly telling a HashMap what Hasher to use","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2513,"byte_end":2567,"line_start":61,"line_end":61,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2568,"byte_end":2571,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ Everytime a value needs to be hashed, when inserting or querying the HashMap for example, a new","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2572,"byte_end":2671,"line_start":63,"line_end":63,"column_start":1,"column_end":100}},{"value":"/ Hasher instance is created. (Remember that the only methods in the Hasher trait update its","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2672,"byte_end":2766,"line_start":64,"line_end":64,"column_start":1,"column_end":95}},{"value":"/ state or return the final value.)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2767,"byte_end":2804,"line_start":65,"line_end":65,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2805,"byte_end":2808,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ As a result, instead of passing in a Hasher, we have to pass an instance of another trait,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2809,"byte_end":2903,"line_start":67,"line_end":67,"column_start":1,"column_end":95}},{"value":"/ `std::hash::BuildHash`. Rust's standard library currently has two implementations of that","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2904,"byte_end":2997,"line_start":68,"line_end":68,"column_start":1,"column_end":94}},{"value":"/ trait: ","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":2998,"byte_end":3009,"line_start":69,"line_end":69,"column_start":1,"column_end":12}},{"value":"/ - `std::collections::hash_map::RandomState`, which creates instances of DefaultHasher,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3010,"byte_end":3100,"line_start":70,"line_end":70,"column_start":1,"column_end":91}},{"value":"/   Rust's implementation of SIP-something using cryptographic keys to prevent denial-of-service","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3101,"byte_end":3199,"line_start":71,"line_end":71,"column_start":1,"column_end":99}},{"value":"/   attacks. ","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3200,"byte_end":3215,"line_start":72,"line_end":72,"column_start":1,"column_end":16}},{"value":"/ - `std::hash::BuildHasherDefault`, which can create instances of any Hasher implementation that","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3216,"byte_end":3315,"line_start":73,"line_end":73,"column_start":1,"column_end":100}},{"value":"/   also implements the Default trait.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3316,"byte_end":3356,"line_start":74,"line_end":74,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3357,"byte_end":3360,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ All of the Hashers in this collection also implement Default.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3361,"byte_end":3426,"line_start":76,"line_end":76,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3427,"byte_end":3430,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3431,"byte_end":3442,"line_start":78,"line_end":78,"column_start":1,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3443,"byte_end":3477,"line_start":79,"line_end":79,"column_start":1,"column_end":35}},{"value":"/ use std::hash::BuildHasherDefault;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3478,"byte_end":3516,"line_start":80,"line_end":80,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3517,"byte_end":3520,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ use hashers::fx_hash::FxHasher;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3521,"byte_end":3556,"line_start":82,"line_end":82,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3557,"byte_end":3560,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ // BuildHasherDefault also implements Default---it's not really interesting.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3561,"byte_end":3641,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/ let mut map =","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3642,"byte_end":3659,"line_start":85,"line_end":85,"column_start":1,"column_end":18}},{"value":"/   HashMap::with_hasher( BuildHasherDefault::<FxHasher>::default() );","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3660,"byte_end":3732,"line_start":86,"line_end":86,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3733,"byte_end":3736,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3737,"byte_end":3758,"line_start":88,"line_end":88,"column_start":1,"column_end":22}},{"value":"/ assert_eq!(map.get(&1), Some(&2));","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3759,"byte_end":3797,"line_start":89,"line_end":89,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3798,"byte_end":3805,"line_start":90,"line_end":90,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3806,"byte_end":3809,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ## Using types to specify what Hasher to use","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3810,"byte_end":3858,"line_start":92,"line_end":92,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3859,"byte_end":3862,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ As an alternative, HashMap has three type-level parameters: the type of keys, the type of","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3863,"byte_end":3956,"line_start":94,"line_end":94,"column_start":1,"column_end":94}},{"value":"/ values, and a type implementing `std::hash::BuildHash`. By default, the latter is","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":3957,"byte_end":4042,"line_start":95,"line_end":95,"column_start":1,"column_end":86}},{"value":"/ `RandomState`, which securely creates DefaultHashers. By replacing RandomState, the Hashers","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4043,"byte_end":4138,"line_start":96,"line_end":96,"column_start":1,"column_end":96}},{"value":"/ used by the map can be determined by the HashMap's concrete type.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4139,"byte_end":4208,"line_start":97,"line_end":97,"column_start":1,"column_end":70}},{"value":"/ `std::hash::BuildHasherDefault` is useful here, as well.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4209,"byte_end":4269,"line_start":98,"line_end":98,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4270,"byte_end":4273,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4274,"byte_end":4285,"line_start":100,"line_end":100,"column_start":1,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4286,"byte_end":4320,"line_start":101,"line_end":101,"column_start":1,"column_end":35}},{"value":"/ use std::hash::BuildHasherDefault;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4321,"byte_end":4359,"line_start":102,"line_end":102,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4360,"byte_end":4363,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ use hashers::fnv::FNV1aHasher64;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4364,"byte_end":4400,"line_start":104,"line_end":104,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4401,"byte_end":4404,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ // This could be more complicated.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4405,"byte_end":4443,"line_start":106,"line_end":106,"column_start":1,"column_end":39}},{"value":"/ fn gimmie_a_map() -> HashMap<i32,i32,BuildHasherDefault<FNV1aHasher64>> {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4444,"byte_end":4521,"line_start":107,"line_end":107,"column_start":1,"column_end":78}},{"value":"/     HashMap::default()","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4522,"byte_end":4548,"line_start":108,"line_end":108,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4549,"byte_end":4554,"line_start":109,"line_end":109,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4555,"byte_end":4558,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ let mut map = gimmie_a_map();","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4559,"byte_end":4592,"line_start":111,"line_end":111,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4593,"byte_end":4596,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ map.insert(1,2);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4597,"byte_end":4617,"line_start":113,"line_end":113,"column_start":1,"column_end":21}},{"value":"/ assert_eq!(map.get(&1), Some(&2));","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4618,"byte_end":4656,"line_start":114,"line_end":114,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4657,"byte_end":4664,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4665,"byte_end":4668,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ A more complicated example is the anagrams-hashmap.rs example program included with this","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4669,"byte_end":4761,"line_start":117,"line_end":117,"column_start":1,"column_end":93}},{"value":"/ module.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4762,"byte_end":4773,"line_start":118,"line_end":118,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4774,"byte_end":4777,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ # About this crate","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4778,"byte_end":4800,"line_start":120,"line_end":120,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4801,"byte_end":4804,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ This collection of Hashers is based on:","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4805,"byte_end":4848,"line_start":122,"line_end":122,"column_start":1,"column_end":44}},{"value":"/ - http://www.cse.yorku.ca/~oz/hash.html Oz's Hash functions. (oz)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4849,"byte_end":4918,"line_start":123,"line_end":123,"column_start":1,"column_end":70}},{"value":"/ - http://www.burtleburtle.net/bob/hash/doobs.html Bob Jenkins'","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4919,"byte_end":4985,"line_start":124,"line_end":124,"column_start":1,"column_end":67}},{"value":"/   (updated) 1997 Dr. Dobbs article. (jenkins)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":4986,"byte_end":5035,"line_start":125,"line_end":125,"column_start":1,"column_end":50}},{"value":"/ - http://burtleburtle.net/bob/hash/spooky.html Jenkin's SpookyHash. (jenkins::spooky_hash)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5036,"byte_end":5130,"line_start":126,"line_end":126,"column_start":1,"column_end":95}},{"value":"/ - Rust's builtin DefaultHasher (SIP 1-3?) (default)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5131,"byte_end":5186,"line_start":127,"line_end":127,"column_start":1,"column_end":56}},{"value":"/ - https://github.com/cbreeden/fxhash A fast, non-secure, hashing algorithm derived from an","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5187,"byte_end":5281,"line_start":128,"line_end":128,"column_start":1,"column_end":95}},{"value":"/   internal hasher in FireFox. (fx_hash)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5282,"byte_end":5325,"line_start":129,"line_end":129,"column_start":1,"column_end":44}},{"value":"/ - http://www.isthe.com/chongo/tech/comp/fnv/ The Fowler/Noll/Vo hash algorithm. (fnv)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5326,"byte_end":5415,"line_start":130,"line_end":130,"column_start":1,"column_end":90}},{"value":"/ - Two \"null\" hashers: NullHasher returns 0 for all inputs and PassThroughHasher returns the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5416,"byte_end":5511,"line_start":131,"line_end":131,"column_start":1,"column_end":96}},{"value":"/   last 8 bytes of the data.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5512,"byte_end":5543,"line_start":132,"line_end":132,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5544,"byte_end":5547,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ Each sub-module implements one or more Hashers plus a minimal testing module. As well, the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5548,"byte_end":5642,"line_start":134,"line_end":134,"column_start":1,"column_end":95}},{"value":"/ module has a benchmarking module for comparing the Hashers and some example programs using","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5643,"byte_end":5737,"line_start":135,"line_end":135,"column_start":1,"column_end":95}},{"value":"/ statistical tests to prod the various Hashers.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5738,"byte_end":5788,"line_start":136,"line_end":136,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5789,"byte_end":5792,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ # Example programs","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5793,"byte_end":5815,"line_start":138,"line_end":138,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5816,"byte_end":5819,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ ## chi2","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5820,"byte_end":5831,"line_start":140,"line_end":140,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5832,"byte_end":5835,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ > The chi-squared test is used to determine whether there is a significant difference between","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5836,"byte_end":5933,"line_start":142,"line_end":142,"column_start":1,"column_end":98}},{"value":"/ > the expected frequencies and the observed frequencies in one or more categories. --","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":5934,"byte_end":6023,"line_start":143,"line_end":143,"column_start":1,"column_end":90}},{"value":"/ > [Chi-squared test](https://en.wikipedia.org/wiki/Chi-squared_test)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6024,"byte_end":6096,"line_start":144,"line_end":144,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6097,"byte_end":6100,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ This program attempts to compute the hash values for one of a number of data sets, then","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6101,"byte_end":6192,"line_start":146,"line_end":146,"column_start":1,"column_end":92}},{"value":"/ simulates using those values in a 128-bucket hash table (a 2^7 - 1 mask) and tries to determine","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6193,"byte_end":6292,"line_start":147,"line_end":147,"column_start":1,"column_end":100}},{"value":"/ if the hash buckets are uniformly distributed. I think. I'm not a statistician and apparently","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6293,"byte_end":6390,"line_start":148,"line_end":148,"column_start":1,"column_end":98}},{"value":"/ not much of a programmer any more. Sorry.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6391,"byte_end":6436,"line_start":149,"line_end":149,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6437,"byte_end":6440,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ Anyway, it shows what may be the chi2 test of the lower bits of the hash values for a number of","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6441,"byte_end":6540,"line_start":151,"line_end":151,"column_start":1,"column_end":100}},{"value":"/ samples and for each Hasher. Numbers closer to 0 are better, and between 3.0 and -3.0 are","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6541,"byte_end":6634,"line_start":152,"line_end":152,"column_start":1,"column_end":94}},{"value":"/ apparently \"ok.\" Maybe.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6635,"byte_end":6662,"line_start":153,"line_end":153,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6663,"byte_end":6666,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ The samples are:","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6667,"byte_end":6687,"line_start":155,"line_end":155,"column_start":1,"column_end":21}},{"value":"/ - 1000 uniformly distributed 6-byte binary values.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6688,"byte_end":6742,"line_start":156,"line_end":156,"column_start":1,"column_end":55}},{"value":"/ - 1000 uniformly distributed 6-byte alphanumeric (ASCII) values.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6743,"byte_end":6811,"line_start":157,"line_end":157,"column_start":1,"column_end":69}},{"value":"/ - 1000 generated identifiers of the form 'annnnn'.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6812,"byte_end":6866,"line_start":158,"line_end":158,"column_start":1,"column_end":55}},{"value":"/ - The words from data/words.txt","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6867,"byte_end":6902,"line_start":159,"line_end":159,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6903,"byte_end":6906,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ ## kolmogorov-smirnov","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6907,"byte_end":6932,"line_start":161,"line_end":161,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6933,"byte_end":6936,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ > The Kolmogorov–Smirnov statistic quantifies a distance","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":6937,"byte_end":6999,"line_start":163,"line_end":163,"column_start":1,"column_end":61}},{"value":"/ > between the empirical distribution function of the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7000,"byte_end":7056,"line_start":164,"line_end":164,"column_start":1,"column_end":57}},{"value":"/ > sample and the cumulative distribution function of","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7057,"byte_end":7113,"line_start":165,"line_end":165,"column_start":1,"column_end":57}},{"value":"/ > the reference distribution. -- [Kolmogorov–Smirnov","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7114,"byte_end":7172,"line_start":166,"line_end":166,"column_start":1,"column_end":57}},{"value":"/ > test](https://en.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test).","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7173,"byte_end":7248,"line_start":167,"line_end":167,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7249,"byte_end":7252,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Ok, this one I have a bit more confidence in. It hashes the same samples as the chi2 program,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7253,"byte_end":7350,"line_start":169,"line_end":169,"column_start":1,"column_end":98}},{"value":"/ then attempts to determine how far from uniformly distributed the 64-bit hash values are,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7351,"byte_end":7444,"line_start":170,"line_end":170,"column_start":1,"column_end":94}},{"value":"/ reporting values between 0.0 and 1.0. Lower values are better. 32-bit hashes like DJB2","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7445,"byte_end":7535,"line_start":171,"line_end":171,"column_start":1,"column_end":91}},{"value":"/ trivially fail this test, though, although they may be fine for HashMaps with much less than 2^32","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7536,"byte_end":7637,"line_start":172,"line_end":172,"column_start":1,"column_end":102}},{"value":"/ entries.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7638,"byte_end":7650,"line_start":173,"line_end":173,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7651,"byte_end":7654,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ## anagrams-hashmap","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7655,"byte_end":7678,"line_start":175,"line_end":175,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7679,"byte_end":7682,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ This program finds the number of words that can be made from the letters","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7683,"byte_end":7759,"line_start":177,"line_end":177,"column_start":1,"column_end":77}},{"value":"/ \"asdwtribnowplfglewhqagnbe\", based on the anagrams dictionary in data/anadict.txt. (There are","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7760,"byte_end":7857,"line_start":178,"line_end":178,"column_start":1,"column_end":98}},{"value":"/ 7440 of them.) It uses implementations of HashMap and HashSet parameterized by Hashers, and","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7858,"byte_end":7953,"line_start":179,"line_end":179,"column_start":1,"column_end":96}},{"value":"/ reports the time taken by each hasher as well as a comparison with DefaultHasher.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":7954,"byte_end":8039,"line_start":180,"line_end":180,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":8040,"byte_end":8043,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ For more information, check out my ancient series of blog posts:","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":8044,"byte_end":8112,"line_start":182,"line_end":182,"column_start":1,"column_end":69}},{"value":"/ - https://maniagnosis.crsr.net/2013/02/creating-letterpress-cheating-program.html","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":8113,"byte_end":8198,"line_start":183,"line_end":183,"column_start":1,"column_end":86}},{"value":"/ - https://maniagnosis.crsr.net/2014/01/letterpress-cheating-in-rust-09.html","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":8199,"byte_end":8278,"line_start":184,"line_end":184,"column_start":1,"column_end":80}},{"value":"/ - https://maniagnosis.crsr.net/2016/01/letterpress-cheating-in-rust-16-how.html","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":8279,"byte_end":8362,"line_start":185,"line_end":185,"column_start":1,"column_end":84}},{"value":"/ And others.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":8363,"byte_end":8378,"line_start":186,"line_end":186,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jenkins","qualname":"::jenkins","value":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":180}],"decl_id":null,"docs":" From http://www.burtleburtle.net/bob/hash/doobs.html.","sig":null,"attributes":[{"value":"/ From http://www.burtleburtle.net/bob/hash/doobs.html.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":16537,"byte_end":16594,"line_start":1,"line_end":1,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":16595,"byte_end":16598,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module mostly comes from his survey of hash functions. See also","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":16599,"byte_end":16671,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"/ https://en.wikipedia.org/wiki/Jenkins_hash_function.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":16672,"byte_end":16728,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":16729,"byte_end":16732,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module includes a sub-module implementing SpookyHash.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":16733,"byte_end":16795,"line_start":6,"line_end":6,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":21},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spooky_hash","qualname":"::jenkins::spooky_hash","value":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":56},{"krate":0,"index":63},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":176}],"decl_id":null,"docs":" From http://burtleburtle.net/bob/hash/spooky.html","sig":null,"attributes":[{"value":"/ From http://burtleburtle.net/bob/hash/spooky.html","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":31385,"byte_end":31438,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":31439,"byte_end":31442,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Quoted comments are from http://burtleburtle.net/bob/c/SpookyV2.h or","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":31443,"byte_end":31515,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"/ http://burtleburtle.net/bob/c/SpookyV2.cpp","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":31516,"byte_end":31562,"line_start":4,"line_end":4,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":56},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":44377,"byte_end":44389,"line_start":397,"line_end":397,"column_start":12,"column_end":24},"name":"SpookyHasher","qualname":"::jenkins::spooky_hash::SpookyHasher","value":"SpookyHasher { m_data, m_state, m_length, m_remainder }","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":62}],"decl_id":null,"docs":" From http://burtleburtle.net/bob/hash/spooky.html\n > SpookyHash is a public domain noncryptographic hash function producing well-distributed\n > 128-bit hash values for byte arrays of any length. It can produce 64-bit and 32-bit hash values\n > too, at the same speed, just use the bottom n bits. The C++ reference implementation is\n > specific to 64-bit x86 platforms, in particular it assumes the processor is little endian. Long\n > keys hash in 3 bytes per cycle, short keys take about 1 byte per cycle, and there is a 30 cycle\n > startup cost. Keys can be supplied in fragments. The function allows a 128-bit seed. It's named\n > SpookyHash because it was released on Halloween.\n","sig":null,"attributes":[{"value":"/ From http://burtleburtle.net/bob/hash/spooky.html","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":43661,"byte_end":43714,"line_start":389,"line_end":389,"column_start":1,"column_end":54}},{"value":"/ > SpookyHash is a public domain noncryptographic hash function producing well-distributed","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":43715,"byte_end":43808,"line_start":390,"line_end":390,"column_start":1,"column_end":94}},{"value":"/ > 128-bit hash values for byte arrays of any length. It can produce 64-bit and 32-bit hash values","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":43809,"byte_end":43910,"line_start":391,"line_end":391,"column_start":1,"column_end":102}},{"value":"/ > too, at the same speed, just use the bottom n bits. The C++ reference implementation is","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":43911,"byte_end":44004,"line_start":392,"line_end":392,"column_start":1,"column_end":94}},{"value":"/ > specific to 64-bit x86 platforms, in particular it assumes the processor is little endian. Long","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":44005,"byte_end":44106,"line_start":393,"line_end":393,"column_start":1,"column_end":102}},{"value":"/ > keys hash in 3 bytes per cycle, short keys take about 1 byte per cycle, and there is a 30 cycle","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":44107,"byte_end":44208,"line_start":394,"line_end":394,"column_start":1,"column_end":102}},{"value":"/ > startup cost. Keys can be supplied in fragments. The function allows a 128-bit seed. It's named","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":44209,"byte_end":44310,"line_start":395,"line_end":395,"column_start":1,"column_end":102}},{"value":"/ > SpookyHash because it was released on Halloween.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":44311,"byte_end":44365,"line_start":396,"line_end":396,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":57},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":44466,"byte_end":44472,"line_start":399,"line_end":399,"column_start":9,"column_end":15},"name":"m_data","qualname":"::jenkins::spooky_hash::SpookyHasher::m_data","value":"[u8; _]","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":59},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":44535,"byte_end":44542,"line_start":401,"line_end":401,"column_start":9,"column_end":16},"name":"m_state","qualname":"::jenkins::spooky_hash::SpookyHasher::m_state","value":"[std::num::Wrapping<u64>; _]","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":61},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":44622,"byte_end":44630,"line_start":403,"line_end":403,"column_start":9,"column_end":17},"name":"m_length","qualname":"::jenkins::spooky_hash::SpookyHasher::m_length","value":"usize","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":62},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":44696,"byte_end":44707,"line_start":405,"line_end":405,"column_start":9,"column_end":20},"name":"m_remainder","qualname":"::jenkins::spooky_hash::SpookyHasher::m_remainder","value":"usize","parent":{"krate":0,"index":56},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":44750,"byte_end":44753,"line_start":409,"line_end":409,"column_start":12,"column_end":15},"name":"new","qualname":"<SpookyHasher>::new","value":"fn new(u64, u64) -> SpookyHasher","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":45521,"byte_end":45530,"line_start":431,"line_end":431,"column_start":12,"column_end":21},"name":"finish128","qualname":"<SpookyHasher>::finish128","value":"fn finish128<'_>(&'_ Self) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":46769,"byte_end":46776,"line_start":466,"line_end":466,"column_start":8,"column_end":15},"name":"default","qualname":"<SpookyHasher as std::default::Default>::default","value":"fn default() -> SpookyHasher","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":46890,"byte_end":46896,"line_start":473,"line_end":473,"column_start":8,"column_end":14},"name":"finish","qualname":"<SpookyHasher as std::hash::Hasher>::finish","value":"fn finish<'_>(&'_ Self) -> u64","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10537},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":46873,"byte_end":46882,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":46968,"byte_end":46973,"line_start":478,"line_end":478,"column_start":8,"column_end":13},"name":"write","qualname":"<SpookyHasher as std::hash::Hasher>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u8])","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10538},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":46951,"byte_end":46960,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":49887,"byte_end":49893,"line_start":551,"line_end":551,"column_start":5,"column_end":11},"name":"spooky","qualname":"::jenkins::spooky_hash::spooky","value":"fn spooky<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Provide access to Lookup3Hasher in a single call.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":74},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17571,"byte_end":17581,"line_start":31,"line_end":31,"column_start":12,"column_end":22},"name":"OAATHasher","qualname":"::jenkins::OAATHasher","value":"","parent":null,"children":[],"decl_id":null,"docs":" The one-at-a-time Hasher. Relatively simple, but superseded by\n later algorithms.","sig":null,"attributes":[{"value":"/ The one-at-a-time Hasher. Relatively simple, but superseded by","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":16942,"byte_end":17008,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"/ later algorithms.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17009,"byte_end":17030,"line_start":18,"line_end":18,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17031,"byte_end":17034,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ From http://www.burtleburtle.net/bob/hash/doobs.html:","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17035,"byte_end":17092,"line_start":20,"line_end":20,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17093,"byte_end":17096,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ > This is similar to the rotating hash, but it actually mixes","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17097,"byte_end":17162,"line_start":22,"line_end":22,"column_start":1,"column_end":66}},{"value":"/ > the internal state. It takes 9n+9 instructions and produces a","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17163,"byte_end":17230,"line_start":23,"line_end":23,"column_start":1,"column_end":68}},{"value":"/ > full 4-byte result. Preliminary analysis suggests there are no","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17231,"byte_end":17299,"line_start":24,"line_end":24,"column_start":1,"column_end":69}},{"value":"/ > funnels.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17300,"byte_end":17314,"line_start":25,"line_end":25,"column_start":1,"column_end":15}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17315,"byte_end":17320,"line_start":26,"line_end":26,"column_start":1,"column_end":6}},{"value":"/ > This hash was not in the original Dr. Dobb's article. I","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17321,"byte_end":17382,"line_start":27,"line_end":27,"column_start":1,"column_end":62}},{"value":"/ > implemented it to fill a set of requirements posed by Colin","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17383,"byte_end":17448,"line_start":28,"line_end":28,"column_start":1,"column_end":66}},{"value":"/ > Plumb. Colin ended up using an even simpler (and weaker) hash","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17449,"byte_end":17516,"line_start":29,"line_end":29,"column_start":1,"column_end":68}},{"value":"/ > that was sufficient for his purpose.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17517,"byte_end":17559,"line_start":30,"line_end":30,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17649,"byte_end":17655,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"finish","qualname":"<OAATHasher as std::hash::Hasher>::finish","value":"fn finish<'_>(&'_ Self) -> u64","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10537},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17632,"byte_end":17641,"line_start":34,"line_end":34,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17829,"byte_end":17834,"line_start":44,"line_end":44,"column_start":8,"column_end":13},"name":"write","qualname":"<OAATHasher as std::hash::Hasher>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u8])","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10538},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17812,"byte_end":17821,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":179},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":18156,"byte_end":18160,"line_start":56,"line_end":56,"column_start":5,"column_end":9},"name":"oaat","qualname":"::jenkins::oaat","value":"fn oaat<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Provide access to OAATHasher in a single call.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":80},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":22068,"byte_end":22081,"line_start":144,"line_end":144,"column_start":12,"column_end":25},"name":"Lookup3Hasher","qualname":"::jenkins::Lookup3Hasher","value":"Lookup3Hasher {  }","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82}],"decl_id":null,"docs":" Another Hasher from the inventor of SpookyHash. Fancy bit-mixing. *Very fancy.*","sig":null,"attributes":[{"value":"/ Another Hasher from the inventor of SpookyHash. Fancy bit-mixing. *Very fancy.*","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":18589,"byte_end":18672,"line_start":79,"line_end":79,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":18673,"byte_end":18676,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ From http://www.burtleburtle.net/bob/hash/doobs.html:","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":18677,"byte_end":18734,"line_start":81,"line_end":81,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":18735,"byte_end":18738,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ > ...http://burtleburtle.net/bob/c/lookup3.c (2006) is about 2","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":18739,"byte_end":18805,"line_start":83,"line_end":83,"column_start":1,"column_end":67}},{"value":"/ > cycles/byte, works well on 32-bit platforms, and can produce a","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":18806,"byte_end":18874,"line_start":84,"line_end":84,"column_start":1,"column_end":69}},{"value":"/ > 32 or 64 bit hash.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":18875,"byte_end":18899,"line_start":85,"line_end":85,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":18900,"byte_end":18903,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ > A hash I wrote nine years later designed along the same lines","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":18904,"byte_end":18971,"line_start":87,"line_end":87,"column_start":1,"column_end":68}},{"value":"/ > as \"My Hash\", see http://burtleburtle.net/bob/c/lookup3.c.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":18972,"byte_end":19036,"line_start":88,"line_end":88,"column_start":1,"column_end":65}},{"value":"/ > It takes 2n instructions per byte for mixing instead of 3n.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19037,"byte_end":19102,"line_start":89,"line_end":89,"column_start":1,"column_end":66}},{"value":"/ > When fitting bytes into registers (the other 3n instructions),","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19103,"byte_end":19171,"line_start":90,"line_end":90,"column_start":1,"column_end":69}},{"value":"/ > it takes advantage of alignment when it can (a trick learned","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19172,"byte_end":19238,"line_start":91,"line_end":91,"column_start":1,"column_end":67}},{"value":"/ > from Paul Hsieh's hash). It doesn't bother to reserve a byte","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19239,"byte_end":19305,"line_start":92,"line_end":92,"column_start":1,"column_end":67}},{"value":"/ > for the length. That allows zero-length strings to require no","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19306,"byte_end":19373,"line_start":93,"line_end":93,"column_start":1,"column_end":68}},{"value":"/ > mixing. More generally, the length that requires additional","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19374,"byte_end":19439,"line_start":94,"line_end":94,"column_start":1,"column_end":66}},{"value":"/ > mixes is now 13-25-37 instead of 12-24-36.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19440,"byte_end":19488,"line_start":95,"line_end":95,"column_start":1,"column_end":49}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19489,"byte_end":19494,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/ > One theoretical insight was that the last mix doesn't need to","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19495,"byte_end":19562,"line_start":97,"line_end":97,"column_start":1,"column_end":68}},{"value":"/ > do well in reverse (though it has to affect all output bits).","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19563,"byte_end":19630,"line_start":98,"line_end":98,"column_start":1,"column_end":68}},{"value":"/ > And the middle mixing steps don't have to affect all output","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19631,"byte_end":19696,"line_start":99,"line_end":99,"column_start":1,"column_end":66}},{"value":"/ > bits (affecting some 32 bits is enough), though it does have","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19697,"byte_end":19763,"line_start":100,"line_end":100,"column_start":1,"column_end":67}},{"value":"/ > to do well in reverse. So it uses different mixes for those","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19764,"byte_end":19829,"line_start":101,"line_end":101,"column_start":1,"column_end":66}},{"value":"/ > two cases. \"My Hash\" (lookup2.c) had a single mixing operation","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19830,"byte_end":19898,"line_start":102,"line_end":102,"column_start":1,"column_end":69}},{"value":"/ > that had to satisfy both sets of requirements, which is why it","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19899,"byte_end":19967,"line_start":103,"line_end":103,"column_start":1,"column_end":69}},{"value":"/ > was slower.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19968,"byte_end":19985,"line_start":104,"line_end":104,"column_start":1,"column_end":18}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19986,"byte_end":19991,"line_start":105,"line_end":105,"column_start":1,"column_end":6}},{"value":"/ > On a Pentium 4 with gcc 3.4.?, Paul's hash was usually faster","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":19992,"byte_end":20059,"line_start":106,"line_end":106,"column_start":1,"column_end":68}},{"value":"/ > than lookup3.c. On a Pentium 4 with gcc 3.2.?, they were about","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20060,"byte_end":20128,"line_start":107,"line_end":107,"column_start":1,"column_end":69}},{"value":"/ > the same speed. On a Pentium 4 with icc -O2, lookup3.c was a","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20129,"byte_end":20195,"line_start":108,"line_end":108,"column_start":1,"column_end":67}},{"value":"/ > little faster than Paul's hash. I don't know how it would play","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20196,"byte_end":20264,"line_start":109,"line_end":109,"column_start":1,"column_end":69}},{"value":"/ > out on other chips and other compilers. lookup3.c is slower","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20265,"byte_end":20330,"line_start":110,"line_end":110,"column_start":1,"column_end":66}},{"value":"/ > than the additive hash pretty much forever, but it's faster","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20331,"byte_end":20396,"line_start":111,"line_end":111,"column_start":1,"column_end":66}},{"value":"/ > than the rotating hash for keys longer than 5 bytes.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20397,"byte_end":20455,"line_start":112,"line_end":112,"column_start":1,"column_end":59}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20456,"byte_end":20461,"line_start":113,"line_end":113,"column_start":1,"column_end":6}},{"value":"/ > lookup3.c does a much more thorough job of mixing than any of","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20462,"byte_end":20529,"line_start":114,"line_end":114,"column_start":1,"column_end":68}},{"value":"/ > my previous hashes (lookup2.c, lookup.c, One-at-a-time). All","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20530,"byte_end":20596,"line_start":115,"line_end":115,"column_start":1,"column_end":67}},{"value":"/ > my previous hashes did a more thorough job of mixing than Paul","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20597,"byte_end":20665,"line_start":116,"line_end":116,"column_start":1,"column_end":69}},{"value":"/ > Hsieh's hash. Paul's hash does a good enough job of mixing for","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20666,"byte_end":20734,"line_start":117,"line_end":117,"column_start":1,"column_end":69}},{"value":"/ > most practical purposes.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20735,"byte_end":20765,"line_start":118,"line_end":118,"column_start":1,"column_end":31}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20766,"byte_end":20771,"line_start":119,"line_end":119,"column_start":1,"column_end":6}},{"value":"/ > The most evil set of keys I know of are sets of keys that are","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20772,"byte_end":20839,"line_start":120,"line_end":120,"column_start":1,"column_end":68}},{"value":"/ > all the same length, with all bytes zero, except with a few","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20840,"byte_end":20905,"line_start":121,"line_end":121,"column_start":1,"column_end":66}},{"value":"/ > bits set. This is tested by frog.c.. To be even more evil, I","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20906,"byte_end":20972,"line_start":122,"line_end":122,"column_start":1,"column_end":67}},{"value":"/ > had my hashes return b and c instead of just c, yielding a","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":20973,"byte_end":21037,"line_start":123,"line_end":123,"column_start":1,"column_end":65}},{"value":"/ > 64-bit hash value. Both lookup.c and lookup2.c start seeing","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21038,"byte_end":21103,"line_start":124,"line_end":124,"column_start":1,"column_end":66}},{"value":"/ > collisions after 253 frog.c keypairs. Paul Hsieh's hash sees","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21104,"byte_end":21170,"line_start":125,"line_end":125,"column_start":1,"column_end":67}},{"value":"/ > collisions after 217 keypairs, even if we take two hashes","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21171,"byte_end":21234,"line_start":126,"line_end":126,"column_start":1,"column_end":64}},{"value":"/ > with different seeds. lookup3.c is the only one of the batch","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21235,"byte_end":21301,"line_start":127,"line_end":127,"column_start":1,"column_end":67}},{"value":"/ > that passes this test. It gets its first collision somewhere","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21302,"byte_end":21368,"line_start":128,"line_end":128,"column_start":1,"column_end":67}},{"value":"/ > beyond 263 keypairs, which is exactly what you'd expect from a","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21369,"byte_end":21437,"line_start":129,"line_end":129,"column_start":1,"column_end":69}},{"value":"/ > completely random mapping to 64-bit values.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21438,"byte_end":21487,"line_start":130,"line_end":130,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21488,"byte_end":21491,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ This structure implements hashlittle2:","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21492,"byte_end":21534,"line_start":132,"line_end":132,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21535,"byte_end":21538,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ > You probably want to use hashlittle(). hashlittle() and","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21539,"byte_end":21600,"line_start":134,"line_end":134,"column_start":1,"column_end":62}},{"value":"/ > hashbig() hash byte arrays. hashlittle() is is faster than","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21601,"byte_end":21665,"line_start":135,"line_end":135,"column_start":1,"column_end":65}},{"value":"/ > hashbig() on little-endian machines. Intel and AMD are","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21666,"byte_end":21726,"line_start":136,"line_end":136,"column_start":1,"column_end":61}},{"value":"/ > little-endian machines. On second thought, you probably want","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21727,"byte_end":21793,"line_start":137,"line_end":137,"column_start":1,"column_end":67}},{"value":"/ > hashlittle2(), which is identical to hashlittle() except it","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21794,"byte_end":21859,"line_start":138,"line_end":138,"column_start":1,"column_end":66}},{"value":"/ > returns two 32-bit hashes for the price of one. You could","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21860,"byte_end":21923,"line_start":139,"line_end":139,"column_start":1,"column_end":64}},{"value":"/ > implement hashbig2() if you wanted but I haven't bothered","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21924,"byte_end":21987,"line_start":140,"line_end":140,"column_start":1,"column_end":64}},{"value":"/ > here.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":21988,"byte_end":21999,"line_start":141,"line_end":141,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":22000,"byte_end":22003,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ See http://www.burtleburtle.net/bob/c/lookup3.c.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":22004,"byte_end":22056,"line_start":143,"line_end":143,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":22245,"byte_end":22252,"line_start":150,"line_end":150,"column_start":8,"column_end":15},"name":"default","qualname":"<Lookup3Hasher as std::default::Default>::default","value":"fn default() -> Lookup3Hasher","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":26802,"byte_end":26808,"line_start":286,"line_end":286,"column_start":8,"column_end":14},"name":"finish","qualname":"<Lookup3Hasher as std::hash::Hasher>::finish","value":"fn finish<'_>(&'_ Self) -> u64","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10537},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":26785,"byte_end":26794,"line_start":285,"line_end":285,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":26909,"byte_end":26914,"line_start":291,"line_end":291,"column_start":8,"column_end":13},"name":"write","qualname":"<Lookup3Hasher as std::hash::Hasher>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u8])","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10538},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":26892,"byte_end":26901,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":180},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":30895,"byte_end":30902,"line_start":381,"line_end":381,"column_start":5,"column_end":12},"name":"lookup3","qualname":"::jenkins::lookup3","value":"fn lookup3<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Provide access to Lookup3Hasher in a single call.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":94},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pigeon","qualname":"::pigeon","value":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":181},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":183}],"decl_id":null,"docs":" # Hash functions by Steven Pigeon (https://hbfs.wordpress.com/)","sig":null,"attributes":[{"value":"/ # Hash functions by Steven Pigeon (https://hbfs.wordpress.com/)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":50431,"byte_end":50498,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":50499,"byte_end":50502,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ From:","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":50503,"byte_end":50512,"line_start":3,"line_end":3,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":50513,"byte_end":50516,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * https://hbfs.wordpress.com/2015/09/29/hash-functions-part-i/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":50517,"byte_end":50583,"line_start":5,"line_end":5,"column_start":1,"column_end":67}},{"value":"/ * https://hbfs.wordpress.com/2015/10/06/the-anatomy-of-hash-functions-hash-functions-part-ii/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":50584,"byte_end":50681,"line_start":6,"line_end":6,"column_start":1,"column_end":98}},{"value":"/ * https://hbfs.wordpress.com/2015/10/13/testing-hash-functions-hash-functions-part-iii/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":50682,"byte_end":50773,"line_start":7,"line_end":7,"column_start":1,"column_end":92}},{"value":"/ * https://hbfs.wordpress.com/2015/10/20/three-bad-functions-hash-functions-part-iv/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":50774,"byte_end":50861,"line_start":8,"line_end":8,"column_start":1,"column_end":88}},{"value":"/ * https://hbfs.wordpress.com/2015/10/27/three-somewhat-better-functions-hash-functions-part-v/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":50862,"byte_end":50960,"line_start":9,"line_end":9,"column_start":1,"column_end":99}},{"value":"/ * https://hbfs.wordpress.com/2015/11/17/and-a-good-one-hash-functions-part-vi/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":50961,"byte_end":51043,"line_start":10,"line_end":10,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51044,"byte_end":51047,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ as well as","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51048,"byte_end":51062,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51063,"byte_end":51066,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ * https://hbfs.wordpress.com/2011/11/08/mild-obfuscation/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51067,"byte_end":51128,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51129,"byte_end":51132,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ > In the previous entries, we learned that a good hash function for","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51133,"byte_end":51204,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ > look-ups should disperse bits as much as possible as well as being","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51205,"byte_end":51277,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ > unpredictable, that is, behave more or less like a pseudo-random","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51278,"byte_end":51348,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/ > number generator. We had a few failed attempts, a few promising ones,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51349,"byte_end":51424,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ > and now, a good one.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51425,"byte_end":51451,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51452,"byte_end":51457,"line_start":21,"line_end":21,"column_start":1,"column_end":6}},{"value":"/ > One of the weak operations in the previous hash functions is the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51458,"byte_end":51528,"line_start":22,"line_end":22,"column_start":1,"column_end":71}},{"value":"/ > combination operation, which is the addition. We remarked that it","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51529,"byte_end":51600,"line_start":23,"line_end":23,"column_start":1,"column_end":72}},{"value":"/ > isn’t very good because it is unlikely to provoke a global change in","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51601,"byte_end":51677,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ > the hash value. Indeed, if you add an 8-bit quantity, then you’re","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51678,"byte_end":51751,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/ > reasonably certain that the value changes for the first 8 bits, but","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51752,"byte_end":51825,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ > after that, changes are operated only through the carry ripple, which","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51826,"byte_end":51901,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ > has only probability \\frac{1}{2}^i of being propagated to the ith bit.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51902,"byte_end":51978,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/ > That is, it is very unlikely to ripple to the end of the word.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":51979,"byte_end":52047,"line_start":29,"line_end":29,"column_start":1,"column_end":69}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52048,"byte_end":52053,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/ > So we need an operation (as simple as possible) to make sure that the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52054,"byte_end":52129,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ > new bits are spread across, and affect, the hash value. Therefore,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52130,"byte_end":52202,"line_start":32,"line_end":32,"column_start":1,"column_end":73}},{"value":"/ > we must scatter input bits. But how? Well, we could design some","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52203,"byte_end":52272,"line_start":33,"line_end":33,"column_start":1,"column_end":70}},{"value":"/ > bit-wise function that takes 8 bits and spread them, but that function","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52273,"byte_end":52349,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ > would be fixed, and independent of the input bits (if we consider a","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52350,"byte_end":52423,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ > permutation-type function). So we need a splatter that depends on","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52424,"byte_end":52495,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/ > the input, but covers more or less all bits. Well, we can do that by","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52496,"byte_end":52570,"line_start":37,"line_end":37,"column_start":1,"column_end":75}},{"value":"/ > (integer) multiplying the next input byte by a large random-looking","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52571,"byte_end":52644,"line_start":38,"line_end":38,"column_start":1,"column_end":74}},{"value":"/ > number. A random-looking prime number, in fact. Why prime? It will not","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52645,"byte_end":52721,"line_start":39,"line_end":39,"column_start":1,"column_end":77}},{"value":"/ > introduce new common factors in the subsequent additions other than","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52722,"byte_end":52795,"line_start":40,"line_end":40,"column_start":1,"column_end":74}},{"value":"/ > those in the input.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52796,"byte_end":52821,"line_start":41,"line_end":41,"column_start":1,"column_end":26}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52822,"byte_end":52827,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/ > Let’s pick one:","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52828,"byte_end":52851,"line_start":43,"line_end":43,"column_start":1,"column_end":22}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52852,"byte_end":52857,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/ > 173773926194192273.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52858,"byte_end":52883,"line_start":45,"line_end":45,"column_start":1,"column_end":26}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52884,"byte_end":52889,"line_start":46,"line_end":46,"column_start":1,"column_end":6}},{"value":"/ > This number is 58 bits long. If you multiply an 8-bit value by a 56-bits","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52890,"byte_end":52968,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ > value, you’d get, most of the times, a 64-bits value. This time, it","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":52969,"byte_end":53044,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ > is a bit bigger to compensate the fact the the 8-bit input doesn’t","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53045,"byte_end":53119,"line_start":49,"line_end":49,"column_start":1,"column_end":73}},{"value":"/ > necessarily use all of its 8 bits. Plus it’s prime. Why? How?","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53120,"byte_end":53189,"line_start":50,"line_end":50,"column_start":1,"column_end":68}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53190,"byte_end":53195,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/ > ![random-typing](https://hbfs.files.wordpress.com/2015/11/random-typing.gif)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53196,"byte_end":53278,"line_start":52,"line_end":52,"column_start":1,"column_end":83}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53279,"byte_end":53284,"line_start":53,"line_end":53,"column_start":1,"column_end":6}},{"value":"/ > (Yes. For real. That how I typed it. Not sorry.) Then let’s mix the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53285,"byte_end":53360,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/ > product. Let’s use the perfect_shuffle we’ve already used. Then","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53361,"byte_end":53434,"line_start":55,"line_end":55,"column_start":1,"column_end":70}},{"value":"/ > combine this value with a simple addition. The combination step being","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53435,"byte_end":53510,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/ > strong enough now, we could use a simple confusion step. Let’s use","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53511,"byte_end":53585,"line_start":57,"line_end":57,"column_start":1,"column_end":73}},{"value":"/ > cut_deck, a function that swaps the high- and low part of the word,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53586,"byte_end":53659,"line_start":58,"line_end":58,"column_start":1,"column_end":74}},{"value":"/ > without exchanging bits in each parts, for a bit more confusion.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53660,"byte_end":53730,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53731,"byte_end":53734,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ Unfortunately, although this *looks* like a good hash function, it is","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53735,"byte_end":53808,"line_start":61,"line_end":61,"column_start":1,"column_end":74}},{"value":"/ very slow, likely because it processes the input one byte at a time. If","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53809,"byte_end":53884,"line_start":62,"line_end":62,"column_start":1,"column_end":76}},{"value":"/ it were modified to correctly handle a larger block, it might actually","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53885,"byte_end":53959,"line_start":63,"line_end":63,"column_start":1,"column_end":75}},{"value":"/ be competitive.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":53960,"byte_end":53979,"line_start":64,"line_end":64,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":101},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":54809,"byte_end":54818,"line_start":90,"line_end":90,"column_start":12,"column_end":21},"name":"Bricolage","qualname":"::pigeon::Bricolage","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":54956,"byte_end":54962,"line_start":98,"line_end":98,"column_start":8,"column_end":14},"name":"finish","qualname":"<Bricolage as std::hash::Hasher>::finish","value":"fn finish<'_>(&'_ Self) -> u64","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10537},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":54939,"byte_end":54948,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":55022,"byte_end":55027,"line_start":103,"line_end":103,"column_start":8,"column_end":13},"name":"write","qualname":"<Bricolage as std::hash::Hasher>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u8])","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10538},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":55005,"byte_end":55014,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":183},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":55328,"byte_end":55337,"line_start":113,"line_end":113,"column_start":5,"column_end":14},"name":"bricolage","qualname":"::pigeon::bricolage","value":"fn bricolage<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Provide access to Bricolage in a single call.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":108},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"oz","qualname":"::oz","value":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":190},{"krate":0,"index":192}],"decl_id":null,"docs":" From http://www.cse.yorku.ca/~oz/hash.html.","sig":null,"attributes":[{"value":"/ From http://www.cse.yorku.ca/~oz/hash.html.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":55712,"byte_end":55759,"line_start":1,"line_end":1,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":55760,"byte_end":55763,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ > A comprehensive collection of hash functions, a hash visualiser","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":55764,"byte_end":55833,"line_start":3,"line_end":3,"column_start":1,"column_end":70}},{"value":"/ > and some test results [see Mckenzie et al. Selecting a Hashing","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":55834,"byte_end":55902,"line_start":4,"line_end":4,"column_start":1,"column_end":69}},{"value":"/ > Algorithm, SP&E 20(2):209-224, Feb 1990] will be available","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":55903,"byte_end":55967,"line_start":5,"line_end":5,"column_start":1,"column_end":65}},{"value":"/ > someday. If you just want to have a good hash function, and cannot","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":55968,"byte_end":56040,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ > wait, djb2 is one of the best string hash functions i know. it has","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56041,"byte_end":56113,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ > excellent distribution and speed on many different sets of keys","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56114,"byte_end":56183,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ > and table sizes. you are not likely to do better with one of the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56184,"byte_end":56254,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/ > \"well known\" functions such as PJW, K&R, etc. Also see tpop","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56255,"byte_end":56320,"line_start":10,"line_end":10,"column_start":1,"column_end":66}},{"value":"/ > pp. 126 for graphing hash functions.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56321,"byte_end":56363,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56364,"byte_end":56367,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ \"tpop\" is *The Practice of Programming*. This page shows three","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56368,"byte_end":56434,"line_start":13,"line_end":13,"column_start":1,"column_end":67}},{"value":"/ classic hashing algorithms.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56435,"byte_end":56466,"line_start":14,"line_end":14,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":115},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":58142,"byte_end":58152,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"name":"DJB2Hasher","qualname":"::oz::DJB2Hasher","value":"","parent":null,"children":[],"decl_id":null,"docs":" Dan Bernstein's famous hashing function.","sig":null,"attributes":[{"value":"/ Dan Bernstein's famous hashing function.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56564,"byte_end":56608,"line_start":21,"line_end":21,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56609,"byte_end":56612,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This Hasher is allegedly good for small tables with lowercase","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56613,"byte_end":56678,"line_start":23,"line_end":23,"column_start":1,"column_end":66}},{"value":"/ ASCII keys. It is also dirt-simple, although other hash","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56679,"byte_end":56738,"line_start":24,"line_end":24,"column_start":1,"column_end":60}},{"value":"/ functions are better and almost as simple.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56739,"byte_end":56785,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56786,"byte_end":56789,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ From http://www.cse.yorku.ca/~oz/hash.html:","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56790,"byte_end":56837,"line_start":27,"line_end":27,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56838,"byte_end":56841,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ > this algorithm (k=33) was first reported by dan bernstein many","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56842,"byte_end":56910,"line_start":29,"line_end":29,"column_start":1,"column_end":69}},{"value":"/ > years ago in comp.lang.c. another version of this algorithm (now","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56911,"byte_end":56981,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ > favored by bernstein) uses xor: `hash(i) = hash(i - 1) * 33 ^","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":56982,"byte_end":57049,"line_start":31,"line_end":31,"column_start":1,"column_end":68}},{"value":"/ > str[i];` the magic of number 33 (why it works better than many","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57050,"byte_end":57118,"line_start":32,"line_end":32,"column_start":1,"column_end":69}},{"value":"/ > other constants, prime or not)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57119,"byte_end":57155,"line_start":33,"line_end":33,"column_start":1,"column_end":37}},{"value":"/ > has never been adequately explained.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57156,"byte_end":57198,"line_start":34,"line_end":34,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57199,"byte_end":57202,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ From http://www.burtleburtle.net/bob/hash/doobs.html:","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57203,"byte_end":57260,"line_start":36,"line_end":36,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57261,"byte_end":57264,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ > If your keys are lowercase English words, this will fit 6","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57265,"byte_end":57328,"line_start":38,"line_end":38,"column_start":1,"column_end":64}},{"value":"/ > characters into a 32-bit hash with no collisions (you'd","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57329,"byte_end":57390,"line_start":39,"line_end":39,"column_start":1,"column_end":62}},{"value":"/ > have to compare all 32 bits). If your keys are mixed case","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57391,"byte_end":57454,"line_start":40,"line_end":40,"column_start":1,"column_end":64}},{"value":"/ > English words, `65 * hash+key[i]` fits 5 characters into a 32-bit","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57455,"byte_end":57526,"line_start":41,"line_end":41,"column_start":1,"column_end":72}},{"value":"/ > hash with no collisions. That means this type of hash can","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57527,"byte_end":57590,"line_start":42,"line_end":42,"column_start":1,"column_end":64}},{"value":"/ > produce (for the right type of keys) fewer collisions than","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57591,"byte_end":57655,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"/ > a hash that gives a more truly random distribution. If your","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57656,"byte_end":57721,"line_start":44,"line_end":44,"column_start":1,"column_end":66}},{"value":"/ > platform doesn't have fast multiplies, no sweat, 33 * hash =","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57722,"byte_end":57788,"line_start":45,"line_end":45,"column_start":1,"column_end":67}},{"value":"/ > hash+(hash<<5) and most compilers will figure that out for","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57789,"byte_end":57853,"line_start":46,"line_end":46,"column_start":1,"column_end":65}},{"value":"/ > you.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57854,"byte_end":57864,"line_start":47,"line_end":47,"column_start":1,"column_end":11}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57865,"byte_end":57870,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/ > On the down side, if you don't have short text keys, this hash","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57871,"byte_end":57939,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"/ > has a easily detectable flaws. For example, there's a 3-into-2","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":57940,"byte_end":58008,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ > funnel that 0x0021 and 0x0100 both have the same hash (hex","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":58009,"byte_end":58073,"line_start":51,"line_end":51,"column_start":1,"column_end":65}},{"value":"/ > 0x21, decimal 33) (you saw that one coming, yes?).","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":58074,"byte_end":58130,"line_start":52,"line_end":52,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":58220,"byte_end":58226,"line_start":57,"line_end":57,"column_start":8,"column_end":14},"name":"finish","qualname":"<DJB2Hasher as std::hash::Hasher>::finish","value":"fn finish<'_>(&'_ Self) -> u64","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10537},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":58203,"byte_end":58212,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":58297,"byte_end":58302,"line_start":62,"line_end":62,"column_start":8,"column_end":13},"name":"write","qualname":"<DJB2Hasher as std::hash::Hasher>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u8])","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10538},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":58280,"byte_end":58289,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":186},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":58580,"byte_end":58584,"line_start":72,"line_end":72,"column_start":5,"column_end":9},"name":"djb2","qualname":"::oz::djb2","value":"fn djb2<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Provide access to DJB2Hasher in a single call.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":121},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59810,"byte_end":59820,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"SDBMHasher","qualname":"::oz::SDBMHasher","value":"","parent":null,"children":[],"decl_id":null,"docs":" The hash function from SDBM (and gawk?). It might be good for\n something.","sig":null,"attributes":[{"value":"/ The hash function from SDBM (and gawk?). It might be good for","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":58941,"byte_end":59006,"line_start":94,"line_end":94,"column_start":1,"column_end":66}},{"value":"/ something.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59007,"byte_end":59021,"line_start":95,"line_end":95,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59022,"byte_end":59025,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ From http://www.cse.yorku.ca/~oz/hash.html:","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59026,"byte_end":59073,"line_start":97,"line_end":97,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59074,"byte_end":59077,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ > this algorithm was created for sdbm (a public-domain","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59078,"byte_end":59136,"line_start":99,"line_end":99,"column_start":1,"column_end":59}},{"value":"/ > reimplementation of ndbm) database library. it was found","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59137,"byte_end":59199,"line_start":100,"line_end":100,"column_start":1,"column_end":63}},{"value":"/ > to do well in scrambling bits, causing better distribution","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59200,"byte_end":59264,"line_start":101,"line_end":101,"column_start":1,"column_end":65}},{"value":"/ > of the keys and fewer splits. it also happens to be a good","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59265,"byte_end":59329,"line_start":102,"line_end":102,"column_start":1,"column_end":65}},{"value":"/ > general hashing function with good distribution. the actual","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59330,"byte_end":59395,"line_start":103,"line_end":103,"column_start":1,"column_end":66}},{"value":"/ > function is `hash(i) = hash(i - 1) * 65599 + str[i];` what is","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59396,"byte_end":59463,"line_start":104,"line_end":104,"column_start":1,"column_end":68}},{"value":"/ > included below is the faster version used in gawk. [there is","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59464,"byte_end":59530,"line_start":105,"line_end":105,"column_start":1,"column_end":67}},{"value":"/ > even a faster, duff-device version] the magic constant 65599","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59531,"byte_end":59597,"line_start":106,"line_end":106,"column_start":1,"column_end":67}},{"value":"/ > was picked out of thin air while experimenting with different","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59598,"byte_end":59665,"line_start":107,"line_end":107,"column_start":1,"column_end":68}},{"value":"/ > constants, and turns out to be a prime. this is one of the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59666,"byte_end":59730,"line_start":108,"line_end":108,"column_start":1,"column_end":65}},{"value":"/ > algorithms used in berkeley db (see sleepycat) and elsewhere.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59731,"byte_end":59798,"line_start":109,"line_end":109,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59888,"byte_end":59894,"line_start":114,"line_end":114,"column_start":8,"column_end":14},"name":"finish","qualname":"<SDBMHasher as std::hash::Hasher>::finish","value":"fn finish<'_>(&'_ Self) -> u64","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10537},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59871,"byte_end":59880,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59965,"byte_end":59970,"line_start":119,"line_end":119,"column_start":8,"column_end":13},"name":"write","qualname":"<SDBMHasher as std::hash::Hasher>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u8])","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10538},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59948,"byte_end":59957,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":189},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":60262,"byte_end":60266,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"sdbm","qualname":"::oz::sdbm","value":"fn sdbm<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Provide access to SDBMHasher in a single call.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":127},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":61411,"byte_end":61425,"line_start":166,"line_end":166,"column_start":12,"column_end":26},"name":"LoseLoseHasher","qualname":"::oz::LoseLoseHasher","value":"","parent":null,"children":[],"decl_id":null,"docs":" A radically bad hash function from the 1st edition of the K&R C\n book. Do not use; it's horrible.","sig":null,"attributes":[{"value":"/ A radically bad hash function from the 1st edition of the K&R C","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":60617,"byte_end":60684,"line_start":151,"line_end":151,"column_start":1,"column_end":68}},{"value":"/ book. Do not use; it's horrible.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":60685,"byte_end":60721,"line_start":152,"line_end":152,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":60722,"byte_end":60725,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ From http://www.cse.yorku.ca/~oz/hash.html","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":60726,"byte_end":60772,"line_start":154,"line_end":154,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":60773,"byte_end":60776,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ > This hash function appeared in K&R (1st ed) but at least the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":60777,"byte_end":60843,"line_start":156,"line_end":156,"column_start":1,"column_end":67}},{"value":"/ > reader was warned: \"This is not the best possible algorithm,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":60844,"byte_end":60910,"line_start":157,"line_end":157,"column_start":1,"column_end":67}},{"value":"/ > but it has the merit of extreme simplicity.\" This is an","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":60911,"byte_end":60972,"line_start":158,"line_end":158,"column_start":1,"column_end":62}},{"value":"/ > understatement; It is a terrible hashing algorithm, and it","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":60973,"byte_end":61037,"line_start":159,"line_end":159,"column_start":1,"column_end":65}},{"value":"/ > could have been much better without sacrificing its \"extreme","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":61038,"byte_end":61104,"line_start":160,"line_end":160,"column_start":1,"column_end":67}},{"value":"/ > simplicity.\" [see the second edition!] Many C programmers","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":61105,"byte_end":61168,"line_start":161,"line_end":161,"column_start":1,"column_end":64}},{"value":"/ > use this function without actually testing it, or checking","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":61169,"byte_end":61233,"line_start":162,"line_end":162,"column_start":1,"column_end":65}},{"value":"/ > something like Knuth's Sorting and Searching, so it stuck. It","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":61234,"byte_end":61301,"line_start":163,"line_end":163,"column_start":1,"column_end":68}},{"value":"/ > is now found mixed with otherwise respectable code, eg. cnews.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":61302,"byte_end":61370,"line_start":164,"line_end":164,"column_start":1,"column_end":69}},{"value":"/ > sigh. [see also: tpop]","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":61371,"byte_end":61399,"line_start":165,"line_end":165,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":61497,"byte_end":61503,"line_start":170,"line_end":170,"column_start":8,"column_end":14},"name":"finish","qualname":"<LoseLoseHasher as std::hash::Hasher>::finish","value":"fn finish<'_>(&'_ Self) -> u64","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10537},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":61480,"byte_end":61489,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":61567,"byte_end":61572,"line_start":175,"line_end":175,"column_start":8,"column_end":13},"name":"write","qualname":"<LoseLoseHasher as std::hash::Hasher>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u8])","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10538},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":61550,"byte_end":61559,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":192},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":61831,"byte_end":61839,"line_start":185,"line_end":185,"column_start":5,"column_end":13},"name":"loselose","qualname":"::oz::loselose","value":"fn loselose<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Provide access to LoseLoseHasher in a single call.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":133},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10707,"byte_end":10714,"line_start":273,"line_end":273,"column_start":9,"column_end":16},"name":"builtin","qualname":"::builtin","value":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":193}],"decl_id":null,"docs":" For easy access, reexport the built-in hash map's DefaultHasher,\n including a matching one-stop function.","sig":null,"attributes":[{"value":"/ For easy access, reexport the built-in hash map's DefaultHasher,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10531,"byte_end":10599,"line_start":269,"line_end":269,"column_start":1,"column_end":69}},{"value":"/ including a matching one-stop function.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10600,"byte_end":10643,"line_start":270,"line_end":270,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10644,"byte_end":10647,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ See std::collections::hash_map::DefaultHasher.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10648,"byte_end":10698,"line_start":272,"line_end":272,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":193},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10899,"byte_end":10906,"line_start":280,"line_end":280,"column_start":9,"column_end":16},"name":"default","qualname":"::builtin::default","value":"fn default<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Provide access to the DefaultHasher in a single function.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":140},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12179,"byte_end":12186,"line_start":320,"line_end":320,"column_start":9,"column_end":16},"name":"fx_hash","qualname":"::fx_hash","value":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196}],"decl_id":null,"docs":" From https://github.com/cbreeden/fxhash\n > This hashing algorithm was extracted from the Rustc compiler. This\n > is the same hashing algorithm used for some internal operations in\n > FireFox. The strength of this algorithm is in hashing 8 bytes at\n > a time on 64-bit platforms, where the FNV algorithm works on one\n > byte at a time.","sig":null,"attributes":[{"value":"/ From https://github.com/cbreeden/fxhash","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10940,"byte_end":10983,"line_start":285,"line_end":285,"column_start":1,"column_end":44}},{"value":"/ > This hashing algorithm was extracted from the Rustc compiler. This","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10984,"byte_end":11056,"line_start":286,"line_end":286,"column_start":1,"column_end":73}},{"value":"/ > is the same hashing algorithm used for some internal operations in","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11057,"byte_end":11129,"line_start":287,"line_end":287,"column_start":1,"column_end":73}},{"value":"/ > FireFox. The strength of this algorithm is in hashing 8 bytes at","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11130,"byte_end":11200,"line_start":288,"line_end":288,"column_start":1,"column_end":71}},{"value":"/ > a time on 64-bit platforms, where the FNV algorithm works on one","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11201,"byte_end":11271,"line_start":289,"line_end":289,"column_start":1,"column_end":71}},{"value":"/ > byte at a time.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11272,"byte_end":11293,"line_start":290,"line_end":290,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11294,"byte_end":11297,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ This Hasher is imported from the fxhash crate.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11298,"byte_end":11348,"line_start":292,"line_end":292,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11349,"byte_end":11352,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ Ok, its is a weird one. It chomps the data in 32- or 64-","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11353,"byte_end":11413,"line_start":294,"line_end":294,"column_start":1,"column_end":61}},{"value":"/ (or system-specific) bit bites, and is otherwise very, very","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11414,"byte_end":11477,"line_start":295,"line_end":295,"column_start":1,"column_end":64}},{"value":"/ simple. Literally, the algorithm is based around hashing a word:","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11478,"byte_end":11546,"line_start":296,"line_end":296,"column_start":1,"column_end":69}},{"value":"/ `rotate_left(5).bitxor(word).wrapping_mul($key)`","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11547,"byte_end":11599,"line_start":297,"line_end":297,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11600,"byte_end":11603,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ The complexity must be the `$key` value, right. In 64-bits, it is 0x517cc1b727220a95. What's","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11604,"byte_end":11700,"line_start":299,"line_end":299,"column_start":1,"column_end":97}},{"value":"/ that, you ask?","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11701,"byte_end":11719,"line_start":300,"line_end":300,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11720,"byte_end":11723,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ ```sh","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11724,"byte_end":11733,"line_start":302,"line_end":302,"column_start":1,"column_end":10}},{"value":"/ $ bc","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11734,"byte_end":11742,"line_start":303,"line_end":303,"column_start":1,"column_end":9}},{"value":"/ ibase = 16","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11743,"byte_end":11757,"line_start":304,"line_end":304,"column_start":1,"column_end":15}},{"value":"/ 517CC1B727220A95","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11758,"byte_end":11778,"line_start":305,"line_end":305,"column_start":1,"column_end":21}},{"value":"/ 5871781006564002453","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11779,"byte_end":11802,"line_start":306,"line_end":306,"column_start":1,"column_end":24}},{"value":"/ ...","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11803,"byte_end":11810,"line_start":307,"line_end":307,"column_start":1,"column_end":8}},{"value":"/ scale = 15","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11811,"byte_end":11825,"line_start":308,"line_end":308,"column_start":1,"column_end":15}},{"value":"/ (2^64) / 5871781006564002453","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11826,"byte_end":11858,"line_start":309,"line_end":309,"column_start":1,"column_end":33}},{"value":"/ 3.141592653589793","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11859,"byte_end":11880,"line_start":310,"line_end":310,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11881,"byte_end":11888,"line_start":311,"line_end":311,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11889,"byte_end":11892,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/ For those not in the bc inner circle, 0x517cc1b727220a95 = 5871781006564002453, which when","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11893,"byte_end":11987,"line_start":313,"line_end":313,"column_start":1,"column_end":95}},{"value":"/ divided into 2^64 is 3.14159, i.e. π.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":11988,"byte_end":12030,"line_start":314,"line_end":314,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12031,"byte_end":12034,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ So, yeah.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12035,"byte_end":12048,"line_start":316,"line_end":316,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12049,"byte_end":12052,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ The fxhash crate provides both 32- and 64-bit versions, as well as FxHasher, which uses the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12053,"byte_end":12148,"line_start":318,"line_end":318,"column_start":1,"column_end":96}},{"value":"/ system bit-width.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12149,"byte_end":12170,"line_start":319,"line_end":319,"column_start":1,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":194},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12292,"byte_end":12298,"line_start":324,"line_end":324,"column_start":20,"column_end":26},"name":"fxhash","qualname":"::fx_hash::fxhash","value":"fn fxhash<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":195},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12330,"byte_end":12338,"line_start":325,"line_end":325,"column_start":20,"column_end":28},"name":"fxhash32","qualname":"::fx_hash::fxhash32","value":"fn fxhash32<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":196},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12372,"byte_end":12380,"line_start":326,"line_end":326,"column_start":20,"column_end":28},"name":"fxhash64","qualname":"::fx_hash::fxhash64","value":"fn fxhash64<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":154},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12519,"byte_end":12523,"line_start":332,"line_end":332,"column_start":9,"column_end":13},"name":"null","qualname":"::null","value":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":197},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":198},{"krate":0,"index":200}],"decl_id":null,"docs":" Poor Hashers used for testing purposes.","sig":null,"attributes":[{"value":"/ Poor Hashers used for testing purposes.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12398,"byte_end":12441,"line_start":329,"line_end":329,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12442,"byte_end":12445,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ These are not expected to be used. Really. They're not good.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12446,"byte_end":12510,"line_start":331,"line_end":331,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":158},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12595,"byte_end":12605,"line_start":336,"line_end":336,"column_start":16,"column_end":26},"name":"NullHasher","qualname":"::null::NullHasher","value":"","parent":null,"children":[],"decl_id":null,"docs":" Always returns 0.\n","sig":null,"attributes":[{"value":"/ Always returns 0.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12558,"byte_end":12579,"line_start":335,"line_end":335,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12670,"byte_end":12676,"line_start":340,"line_end":340,"column_start":12,"column_end":18},"name":"finish","qualname":"<NullHasher as std::hash::Hasher>::finish","value":"fn finish<'_>(&'_ Self) -> u64","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10537},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12649,"byte_end":12658,"line_start":339,"line_end":339,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12750,"byte_end":12755,"line_start":345,"line_end":345,"column_start":12,"column_end":17},"name":"write","qualname":"<NullHasher as std::hash::Hasher>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u8])","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10538},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12729,"byte_end":12738,"line_start":344,"line_end":344,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12876,"byte_end":12883,"line_start":351,"line_end":351,"column_start":12,"column_end":19},"name":"default","qualname":"<NullHasher as std::default::Default>::default","value":"fn default() -> NullHasher","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":197},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":13029,"byte_end":13033,"line_start":358,"line_end":358,"column_start":9,"column_end":13},"name":"null","qualname":"::null::null","value":"fn null<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Provide access to NullHasher in a single call.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":165},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":13174,"byte_end":13191,"line_start":365,"line_end":365,"column_start":16,"column_end":33},"name":"PassThroughHasher","qualname":"::null::PassThroughHasher","value":"","parent":null,"children":[],"decl_id":null,"docs":" Returns the last 8 bytes of the data, as a u64.\n","sig":null,"attributes":[{"value":"/ Returns the last 8 bytes of the data, as a u64.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":13107,"byte_end":13158,"line_start":364,"line_end":364,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":13268,"byte_end":13274,"line_start":369,"line_end":369,"column_start":12,"column_end":18},"name":"finish","qualname":"<PassThroughHasher as std::hash::Hasher>::finish","value":"fn finish<'_>(&'_ Self) -> u64","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10537},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":13247,"byte_end":13256,"line_start":368,"line_end":368,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":13350,"byte_end":13355,"line_start":374,"line_end":374,"column_start":12,"column_end":17},"name":"write","qualname":"<PassThroughHasher as std::hash::Hasher>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u8])","parent":{"krate":2,"index":10536},"children":[],"decl_id":{"krate":2,"index":10538},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":13329,"byte_end":13338,"line_start":373,"line_end":373,"column_start":9,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":200},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":13725,"byte_end":13736,"line_start":386,"line_end":386,"column_start":9,"column_end":20},"name":"passthrough","qualname":"::null::passthrough","value":"fn passthrough<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Provide access to PassThroughHasher in a single call.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":171},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14961,"byte_end":14964,"line_start":412,"line_end":412,"column_start":9,"column_end":12},"name":"fnv","qualname":"::fnv","value":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":175},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":218}],"decl_id":null,"docs":" The [Fowler–Noll–Vo hash function](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function).","sig":null,"attributes":[{"value":"/ The [Fowler–Noll–Vo hash function](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function).","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":13834,"byte_end":13953,"line_start":394,"line_end":394,"column_start":1,"column_end":116}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":13954,"byte_end":13957,"line_start":395,"line_end":395,"column_start":1,"column_end":4}},{"value":"/ http://www.isthe.com/chongo/tech/comp/fnv/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":13958,"byte_end":14004,"line_start":396,"line_end":396,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14005,"byte_end":14008,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ > The basis of the FNV hash algorithm was taken from an idea sent as reviewer comments to the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14009,"byte_end":14106,"line_start":398,"line_end":398,"column_start":1,"column_end":98}},{"value":"/ > IEEE POSIX P1003.2 committee by Glenn Fowler and Phong Vo back in 1991. In a subsequent ballot","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14107,"byte_end":14207,"line_start":399,"line_end":399,"column_start":1,"column_end":101}},{"value":"/ > round: Landon Curt Noll improved on their algorithm. Some people tried this hash and found that","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14208,"byte_end":14309,"line_start":400,"line_end":400,"column_start":1,"column_end":102}},{"value":"/ > it worked rather well. In an EMail message to Landon, they named it the ``Fowler/Noll/Vo'' or","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14310,"byte_end":14409,"line_start":401,"line_end":401,"column_start":1,"column_end":100}},{"value":"/ > FNV hash.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14410,"byte_end":14425,"line_start":402,"line_end":402,"column_start":1,"column_end":16}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14426,"byte_end":14431,"line_start":403,"line_end":403,"column_start":1,"column_end":6}},{"value":"/ > FNV hashes are designed to be fast while maintaining a low collision rate. The FNV speed allows","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14432,"byte_end":14533,"line_start":404,"line_end":404,"column_start":1,"column_end":102}},{"value":"/ > one to quickly hash lots of data while maintaining a reasonable collision rate. The high","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14534,"byte_end":14628,"line_start":405,"line_end":405,"column_start":1,"column_end":95}},{"value":"/ > dispersion of the FNV hashes makes them well suited for hashing nearly identical strings such","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14629,"byte_end":14728,"line_start":406,"line_end":406,"column_start":1,"column_end":100}},{"value":"/ > as URLs, hostnames, filenames, text, IP addresses, etc.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14729,"byte_end":14790,"line_start":407,"line_end":407,"column_start":1,"column_end":62}},{"value":"/ >","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14791,"byte_end":14796,"line_start":408,"line_end":408,"column_start":1,"column_end":6}},{"value":"/ > The IETF has an informational draft on The FNV Non-Cryptographic Hash Algorithm ","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14797,"byte_end":14883,"line_start":409,"line_end":409,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14884,"byte_end":14887,"line_start":410,"line_end":410,"column_start":1,"column_end":4}},{"value":"/ This module provides both 32- and 64-bit versions of FNV-1a.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":14888,"byte_end":14952,"line_start":411,"line_end":411,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":201},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":15678,"byte_end":15691,"line_start":435,"line_end":435,"column_start":12,"column_end":25},"name":"FNV1aHasher32","qualname":"::fnv::FNV1aHasher32","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":209},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":15732,"byte_end":15745,"line_start":436,"line_end":436,"column_start":12,"column_end":25},"name":"FNV1aHasher64","qualname":"::fnv::FNV1aHasher64","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":217},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":15879,"byte_end":15886,"line_start":440,"line_end":440,"column_start":9,"column_end":16},"name":"fnv1a32","qualname":"::fnv::fnv1a32","value":"fn fnv1a32<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Provide access to FNV1aHasher32 in a single call.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":218},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":16008,"byte_end":16015,"line_start":446,"line_end":446,"column_start":9,"column_end":16},"name":"fnv1a64","qualname":"::fnv::fnv1a64","value":"fn fnv1a64<'_>(&'_ [u8]) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Provide access to FNV1aHasher64 in a single call.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10240,"byte_end":10249,"line_start":252,"line_end":252,"column_start":9,"column_end":18}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":44724,"byte_end":44736,"line_start":408,"line_end":408,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":46747,"byte_end":46759,"line_start":465,"line_end":465,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":46854,"byte_end":46866,"line_start":471,"line_end":471,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17615,"byte_end":17625,"line_start":33,"line_end":33,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":22222,"byte_end":22235,"line_start":149,"line_end":149,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":26765,"byte_end":26778,"line_start":284,"line_end":284,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":54923,"byte_end":54932,"line_start":96,"line_end":96,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":58186,"byte_end":58196,"line_start":55,"line_end":55,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59854,"byte_end":59864,"line_start":112,"line_end":112,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":61459,"byte_end":61473,"line_start":168,"line_end":168,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12628,"byte_end":12638,"line_start":338,"line_end":338,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12852,"byte_end":12862,"line_start":350,"line_end":350,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":13219,"byte_end":13236,"line_start":367,"line_end":367,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10493,"byte_end":10500,"line_start":265,"line_end":265,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":7}},{"kind":"Mod","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":16874,"byte_end":16885,"line_start":12,"line_end":12,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":21}},{"kind":"Mod","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10510,"byte_end":10516,"line_start":266,"line_end":266,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":94}},{"kind":"Mod","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":10526,"byte_end":10528,"line_start":267,"line_end":267,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":108}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":44724,"byte_end":44736,"line_start":408,"line_end":408,"column_start":6,"column_end":18},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":56},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":46747,"byte_end":46759,"line_start":465,"line_end":465,"column_start":18,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":56},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/spooky_hash.rs","byte_start":46854,"byte_end":46866,"line_start":471,"line_end":471,"column_start":17,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":56},"to":{"krate":2,"index":10536}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":17615,"byte_end":17625,"line_start":33,"line_end":33,"column_start":17,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":74},"to":{"krate":2,"index":10536}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":22222,"byte_end":22235,"line_start":149,"line_end":149,"column_start":18,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":80},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/jenkins/mod.rs","byte_start":26765,"byte_end":26778,"line_start":284,"line_end":284,"column_start":17,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":80},"to":{"krate":2,"index":10536}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/pigeon.rs","byte_start":54923,"byte_end":54932,"line_start":96,"line_end":96,"column_start":17,"column_end":26},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":101},"to":{"krate":2,"index":10536}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":58186,"byte_end":58196,"line_start":55,"line_end":55,"column_start":17,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":115},"to":{"krate":2,"index":10536}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":59854,"byte_end":59864,"line_start":112,"line_end":112,"column_start":17,"column_end":27},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":121},"to":{"krate":2,"index":10536}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/oz.rs","byte_start":61459,"byte_end":61473,"line_start":168,"line_end":168,"column_start":17,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":127},"to":{"krate":2,"index":10536}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12628,"byte_end":12638,"line_start":338,"line_end":338,"column_start":21,"column_end":31},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":158},"to":{"krate":2,"index":10536}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":12852,"byte_end":12862,"line_start":350,"line_end":350,"column_start":22,"column_end":32},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":158},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/hashers-1.0.1/src/lib.rs","byte_start":13219,"byte_end":13236,"line_start":367,"line_end":367,"column_start":21,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":165},"to":{"krate":2,"index":10536}}]}