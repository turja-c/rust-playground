{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3","program":"/Users/turjachowdhury/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","bech32","/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=b91d811cd1f720b8","-C","extra-filename=-b91d811cd1f720b8","--out-dir","/Users/turjachowdhury/GitHub/rust-playground/eth/ethers/target/rls/debug/deps","-L","dependency=/Users/turjachowdhury/GitHub/rust-playground/eth/ethers/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/turjachowdhury/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/turjachowdhury/GitHub/rust-playground/eth/ethers/target/rls/debug/deps/libbech32-b91d811cd1f720b8.rmeta"},"prelude":{"crate_id":{"name":"bech32","disambiguator":[12852976960638360668,0]},"crate_root":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src","external_crates":[{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3177202280525429736,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14771084576412554041,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2214913233095760658,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14062411168213242900,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12076482825092298057,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[14222321261015582298,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8777242437552039366,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17835652209006724865,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[8739993533421390330,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[14051958152740382928,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[10065303707608660519,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[11544620977869425193,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[6400271788769952154,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[15384311983005613458,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[18308402029100966730,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[6407954677654987270,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[15697432329694890830,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[8370702540642071065,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[13043233986326649044,0]}}],"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1110,"byte_end":27991,"line_start":21,"line_end":886,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1110,"byte_end":27991,"line_start":21,"line_end":886,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":16},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":28},{"krate":0,"index":32},{"krate":0,"index":38},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":72},{"krate":0,"index":126},{"krate":0,"index":133},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":142},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":176},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100}],"decl_id":null,"docs":" Encoding and decoding of the Bech32 format","sig":null,"attributes":[{"value":"/ Encoding and decoding of the Bech32 format","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1110,"byte_end":1156,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1157,"byte_end":1160,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Bech32 is an encoding scheme that is easy to use for humans and efficient to encode in QR codes.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1161,"byte_end":1261,"line_start":23,"line_end":23,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1262,"byte_end":1265,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ A Bech32 string consists of a human-readable part (HRP), a separator (the character `'1'`), and a data part.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1266,"byte_end":1378,"line_start":25,"line_end":25,"column_start":1,"column_end":113}},{"value":"/ A checksum at the end of the string provides error detection to prevent mistakes when the string is written off or read out loud.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1379,"byte_end":1512,"line_start":26,"line_end":26,"column_start":1,"column_end":134}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1513,"byte_end":1516,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The original description in [BIP-0173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki) has more details.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1517,"byte_end":1641,"line_start":28,"line_end":28,"column_start":1,"column_end":125}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1642,"byte_end":1645,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1646,"byte_end":1660,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1661,"byte_end":1664,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1665,"byte_end":1672,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ use bech32::{self, FromBase32, ToBase32};","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1673,"byte_end":1718,"line_start":33,"line_end":33,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1719,"byte_end":1722,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let encoded = bech32::encode(\"bech32\", vec![0x00, 0x01, 0x02].to_base32()).unwrap();","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1723,"byte_end":1811,"line_start":35,"line_end":35,"column_start":1,"column_end":89}},{"value":"/ assert_eq!(encoded, \"bech321qqqsyrhqy2a\".to_string());","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1812,"byte_end":1870,"line_start":36,"line_end":36,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1871,"byte_end":1874,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let (hrp, data) = bech32::decode(&encoded).unwrap();","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1875,"byte_end":1931,"line_start":38,"line_end":38,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(hrp, \"bech32\");","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1932,"byte_end":1962,"line_start":39,"line_end":39,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(Vec::<u8>::from_base32(&data).unwrap(), vec![0x00, 0x01, 0x02]);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":1963,"byte_end":2042,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2043,"byte_end":2050,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2051,"byte_end":2054,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"allow(unknown_lints)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2140,"byte_end":2164,"line_start":45,"line_end":45,"column_start":1,"column_end":25}},{"value":"allow(bare_trait_objects)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2165,"byte_end":2194,"line_start":46,"line_end":46,"column_start":1,"column_end":30}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2195,"byte_end":2217,"line_start":47,"line_end":47,"column_start":1,"column_end":23}},{"value":"deny(non_upper_case_globals)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2218,"byte_end":2250,"line_start":48,"line_end":48,"column_start":1,"column_end":33}},{"value":"deny(non_camel_case_types)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2251,"byte_end":2281,"line_start":49,"line_end":49,"column_start":1,"column_end":31}},{"value":"deny(non_snake_case)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2282,"byte_end":2306,"line_start":50,"line_end":50,"column_start":1,"column_end":25}},{"value":"deny(unused_mut)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2307,"byte_end":2327,"line_start":51,"line_end":51,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":102},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2703,"byte_end":2705,"line_start":64,"line_end":64,"column_start":12,"column_end":14},"name":"u5","qualname":"::u5","value":"","parent":null,"children":[],"decl_id":null,"docs":" Integer in the range `0..32`\n","sig":null,"attributes":[{"value":"/ Integer in the range `0..32`","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2551,"byte_end":2583,"line_start":61,"line_end":61,"column_start":1,"column_end":33}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2661,"byte_end":2691,"line_start":63,"line_end":63,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2802,"byte_end":2813,"line_start":68,"line_end":68,"column_start":12,"column_end":23},"name":"try_from_u8","qualname":"<u5>::try_from_u8","value":"fn try_from_u8(u8) -> Result<u5, Error>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `u8` to `u5` if in range, return `Error` otherwise\n","sig":null,"attributes":[{"value":"/ Convert a `u8` to `u5` if in range, return `Error` otherwise","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2726,"byte_end":2790,"line_start":67,"line_end":67,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3038,"byte_end":3043,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"to_u8","qualname":"<u5>::to_u8","value":"fn to_u8(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the underlying `u8` value\n","sig":null,"attributes":[{"value":"/ Returns a copy of the underlying `u8` value","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2979,"byte_end":3026,"line_start":76,"line_end":76,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3159,"byte_end":3166,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"to_char","qualname":"<u5>::to_char","value":"fn to_char(Self) -> char","parent":null,"children":[],"decl_id":null,"docs":" Get char representing this 5 bit value as defined in BIP173\n","sig":null,"attributes":[{"value":"/ Get char representing this 5 bit value as defined in BIP173","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3084,"byte_end":3147,"line_start":81,"line_end":81,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3261,"byte_end":3265,"line_start":88,"line_end":88,"column_start":8,"column_end":12},"name":"into","qualname":"<u5 as std::convert::Into>::into","value":"fn into(Self) -> u8","parent":{"krate":2,"index":3166},"children":[],"decl_id":{"krate":2,"index":3168},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3335,"byte_end":3341,"line_start":94,"line_end":94,"column_start":8,"column_end":14},"name":"as_ref","qualname":"<u5 as std::convert::AsRef>::as_ref","value":"fn as_ref<'_>(&'_ Self) -> &'_ u8","parent":{"krate":2,"index":3160},"children":[],"decl_id":{"krate":2,"index":3162},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":24},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3434,"byte_end":3445,"line_start":100,"line_end":100,"column_start":11,"column_end":22},"name":"WriteBase32","qualname":"::WriteBase32","value":"WriteBase32","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27}],"decl_id":null,"docs":" Interface to write `u5`s into a sink\n","sig":null,"attributes":[{"value":"/ Interface to write `u5`s into a sink","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3383,"byte_end":3423,"line_start":99,"line_end":99,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":25},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3477,"byte_end":3480,"line_start":102,"line_end":102,"column_start":10,"column_end":13},"name":"Err","qualname":"::WriteBase32::Err","value":"type Err: fmt::Debug;","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":" Write error\n","sig":null,"attributes":[{"value":"/ Write error","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3452,"byte_end":3467,"line_start":101,"line_end":101,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3529,"byte_end":3534,"line_start":105,"line_end":105,"column_start":8,"column_end":13},"name":"write","qualname":"::WriteBase32::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u5]) -> Result<(), Self::Err>","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":" Write a `u5` slice\n","sig":null,"attributes":[{"value":"/ Write a `u5` slice","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3499,"byte_end":3521,"line_start":104,"line_end":104,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3709,"byte_end":3717,"line_start":113,"line_end":113,"column_start":8,"column_end":16},"name":"write_u5","qualname":"::WriteBase32::write_u5","value":"fn write_u5<'_>(&'_ mut Self, u5) -> Result<(), Self::Err>","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":" Write a single `u5`\n","sig":null,"attributes":[{"value":"/ Write a single `u5`","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3678,"byte_end":3701,"line_start":112,"line_end":112,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":28},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3894,"byte_end":3906,"line_start":118,"line_end":118,"column_start":12,"column_end":24},"name":"Bech32Writer","qualname":"::Bech32Writer","value":"Bech32Writer {  }","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31}],"decl_id":null,"docs":" Allocationless Bech32 writer that accumulates the checksum data internally and writes them out\n in the end.\n","sig":null,"attributes":[{"value":"/ Allocationless Bech32 writer that accumulates the checksum data internally and writes them out","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3768,"byte_end":3866,"line_start":116,"line_end":116,"column_start":1,"column_end":99}},{"value":"/ in the end.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3867,"byte_end":3882,"line_start":117,"line_end":117,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":4212,"byte_end":4215,"line_start":128,"line_end":128,"column_start":12,"column_end":15},"name":"new","qualname":"<Bech32Writer>::new","value":"fn new<'_>(&'_ str, &'a mut fmt::Write) -> Result<Bech32Writer, fmt::Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new writer that can write a bech32 string without allocating itself.","sig":null,"attributes":[{"value":"/ Creates a new writer that can write a bech32 string without allocating itself.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3997,"byte_end":4079,"line_start":124,"line_end":124,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":4084,"byte_end":4087,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ This is a rather low-level API and doesn't check the HRP or data length for standard","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":4092,"byte_end":4180,"line_start":126,"line_end":126,"column_start":5,"column_end":93}},{"value":"/ compliance.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":4185,"byte_end":4200,"line_start":127,"line_end":127,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":5155,"byte_end":5163,"line_start":161,"line_end":161,"column_start":12,"column_end":20},"name":"finalize","qualname":"<Bech32Writer>::finalize","value":"fn finalize(Self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Write out the checksum at the end. If this method isn't called this will happen on drop.\n","sig":null,"attributes":[{"value":"/ Write out the checksum at the end. If this method isn't called this will happen on drop.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":5051,"byte_end":5143,"line_start":160,"line_end":160,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":5765,"byte_end":5773,"line_start":187,"line_end":187,"column_start":8,"column_end":16},"name":"write_u5","qualname":"<Bech32Writer as WriteBase32>::write_u5","value":"fn write_u5<'_>(&'_ mut Self, u5) -> fmt::Result","parent":{"krate":0,"index":24},"children":[],"decl_id":{"krate":0,"index":27},"docs":" Writes a single 5 bit value of the data part\n","sig":null,"attributes":[{"value":"/ Writes a single 5 bit value of the data part","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":5709,"byte_end":5757,"line_start":186,"line_end":186,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":5948,"byte_end":5952,"line_start":194,"line_end":194,"column_start":8,"column_end":12},"name":"drop","qualname":"<Bech32Writer as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3510},"children":[],"decl_id":{"krate":2,"index":3511},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":45},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6166,"byte_end":6176,"line_start":202,"line_end":202,"column_start":11,"column_end":21},"name":"FromBase32","qualname":"::FromBase32","value":"FromBase32: Sized","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47}],"decl_id":null,"docs":" Parse/convert base32 slice to `Self`. It is the reciprocal of\n `ToBase32`.\n","sig":null,"attributes":[{"value":"/ Parse/convert base32 slice to `Self`. It is the reciprocal of","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6074,"byte_end":6139,"line_start":200,"line_end":200,"column_start":1,"column_end":66}},{"value":"/ `ToBase32`.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6140,"byte_end":6155,"line_start":201,"line_end":201,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6290,"byte_end":6293,"line_start":204,"line_end":204,"column_start":10,"column_end":13},"name":"Err","qualname":"::FromBase32::Err","value":"type Err;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" The associated error which can be returned from parsing (e.g. because of bad padding).\n","sig":null,"attributes":[{"value":"/ The associated error which can be returned from parsing (e.g. because of bad padding).","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6190,"byte_end":6280,"line_start":203,"line_end":203,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6345,"byte_end":6356,"line_start":207,"line_end":207,"column_start":8,"column_end":19},"name":"from_base32","qualname":"::FromBase32::from_base32","value":"fn from_base32<'_>(&'_ [u5]) -> Result<Self, Self::Err>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Convert a base32 slice to `Self`.\n","sig":null,"attributes":[{"value":"/ Convert a base32 slice to `Self`.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6300,"byte_end":6337,"line_start":206,"line_end":206,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6458,"byte_end":6463,"line_start":213,"line_end":213,"column_start":8,"column_end":13},"name":"write","qualname":"<Vec<u5> as WriteBase32>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u5]) -> Result<(), Self::Err>","parent":{"krate":0,"index":24},"children":[],"decl_id":{"krate":0,"index":26},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6582,"byte_end":6590,"line_start":218,"line_end":218,"column_start":8,"column_end":16},"name":"write_u5","qualname":"<Vec<u5> as WriteBase32>::write_u5","value":"fn write_u5<'_>(&'_ mut Self, u5) -> Result<(), Self::Err>","parent":{"krate":0,"index":24},"children":[],"decl_id":{"krate":0,"index":27},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6893,"byte_end":6904,"line_start":229,"line_end":229,"column_start":8,"column_end":19},"name":"from_base32","qualname":"<Vec<u8> as FromBase32>::from_base32","value":"fn from_base32<'_>(&'_ [u5]) -> Result<Self, Self::Err>","parent":{"krate":0,"index":45},"children":[],"decl_id":{"krate":0,"index":47},"docs":" Convert base32 to base256, removes null-padding if present, returns\n `Err(Error::InvalidPadding)` if padding bits are unequal `0`\n","sig":null,"attributes":[{"value":"/ Convert base32 to base256, removes null-padding if present, returns","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6745,"byte_end":6816,"line_start":227,"line_end":227,"column_start":5,"column_end":76}},{"value":"/ `Err(Error::InvalidPadding)` if padding bits are unequal `0`","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6821,"byte_end":6885,"line_start":228,"line_end":228,"column_start":5,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":55},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":7083,"byte_end":7091,"line_start":235,"line_end":235,"column_start":11,"column_end":19},"name":"ToBase32","qualname":"::ToBase32","value":"ToBase32","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"decl_id":null,"docs":" A trait for converting a value to a type `T` that represents a `u5` slice.\n","sig":null,"attributes":[{"value":"/ A trait for converting a value to a type `T` that represents a `u5` slice.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6994,"byte_end":7072,"line_start":234,"line_end":234,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":7141,"byte_end":7150,"line_start":237,"line_end":237,"column_start":8,"column_end":17},"name":"to_base32","qualname":"::ToBase32::to_base32","value":"fn to_base32<'_>(&'_ Self) -> Vec<u5>","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Convert `Self` to base32 vector\n","sig":null,"attributes":[{"value":"/ Convert `Self` to base32 vector","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":7098,"byte_end":7133,"line_start":236,"line_end":236,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":7382,"byte_end":7394,"line_start":245,"line_end":245,"column_start":8,"column_end":20},"name":"write_base32","qualname":"::ToBase32::write_base32","value":"fn write_base32<W, '_, '_>(&'_ Self, &'_ mut W)\n-> Result<(), <W as WriteBase32>::Err> where W: WriteBase32","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Encode as base32 and write it to the supplied writer\n Implementations shouldn't allocate.\n","sig":null,"attributes":[{"value":"/ Encode as base32 and write it to the supplied writer","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":7274,"byte_end":7330,"line_start":243,"line_end":243,"column_start":5,"column_end":61}},{"value":"/ Implementations shouldn't allocate.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":7335,"byte_end":7374,"line_start":244,"line_end":244,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":59},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":7582,"byte_end":7591,"line_start":249,"line_end":249,"column_start":11,"column_end":20},"name":"Base32Len","qualname":"::Base32Len","value":"Base32Len: ToBase32","parent":null,"children":[{"krate":0,"index":60}],"decl_id":null,"docs":" Interface to calculate the length of the base32 representation before actually serializing\n","sig":null,"attributes":[{"value":"/ Interface to calculate the length of the base32 representation before actually serializing","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":7477,"byte_end":7571,"line_start":248,"line_end":248,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":7658,"byte_end":7668,"line_start":251,"line_end":251,"column_start":8,"column_end":18},"name":"base32_len","qualname":"::Base32Len::base32_len","value":"fn base32_len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Calculate the base32 serialized length\n","sig":null,"attributes":[{"value":"/ Calculate the base32 serialized length","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":7608,"byte_end":7650,"line_start":250,"line_end":250,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":7734,"byte_end":7746,"line_start":255,"line_end":255,"column_start":8,"column_end":20},"name":"write_base32","qualname":"<T as ToBase32>::write_base32","value":"fn write_base32<W, '_, '_>(&'_ Self, &'_ mut W)\n-> Result<(), <W as WriteBase32>::Err> where W: WriteBase32","parent":{"krate":0,"index":55},"children":[],"decl_id":{"krate":0,"index":57},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":9503,"byte_end":9513,"line_start":299,"line_end":299,"column_start":8,"column_end":18},"name":"base32_len","qualname":"<T as Base32Len>::base32_len","value":"fn base32_len<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":59},"children":[],"decl_id":{"krate":0,"index":60},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":68},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":9837,"byte_end":9848,"line_start":311,"line_end":311,"column_start":11,"column_end":22},"name":"CheckBase32","qualname":"::CheckBase32","value":"CheckBase32<T>","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71}],"decl_id":null,"docs":" A trait to convert between u8 arrays and u5 arrays without changing the content of the elements,\n but checking that they are in range.\n","sig":null,"attributes":[{"value":"/ A trait to convert between u8 arrays and u5 arrays without changing the content of the elements,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":9685,"byte_end":9785,"line_start":309,"line_end":309,"column_start":1,"column_end":101}},{"value":"/ but checking that they are in range.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":9786,"byte_end":9826,"line_start":310,"line_end":310,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":70},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":9915,"byte_end":9918,"line_start":313,"line_end":313,"column_start":10,"column_end":13},"name":"Err","qualname":"::CheckBase32::Err","value":"type Err;","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Error type if conversion fails\n","sig":null,"attributes":[{"value":"/ Error type if conversion fails","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":9871,"byte_end":9905,"line_start":312,"line_end":312,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":10013,"byte_end":10025,"line_start":316,"line_end":316,"column_start":8,"column_end":20},"name":"check_base32","qualname":"::CheckBase32::check_base32","value":"fn check_base32(Self) -> Result<T, Self::Err>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Check if all values are in range and return array-like struct of `u5` values\n","sig":null,"attributes":[{"value":"/ Check if all values are in range and return array-like struct of `u5` values","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":9925,"byte_end":10005,"line_start":315,"line_end":315,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":10144,"byte_end":10156,"line_start":322,"line_end":322,"column_start":8,"column_end":20},"name":"check_base32","qualname":"<T as CheckBase32>::check_base32","value":"fn check_base32(Self) -> Result<Vec<u5>, Self::Err>","parent":{"krate":0,"index":68},"children":[],"decl_id":{"krate":0,"index":71},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":79},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":11849,"byte_end":11862,"line_start":382,"line_end":382,"column_start":8,"column_end":21},"name":"encode_to_fmt","qualname":"::encode_to_fmt","value":"fn encode_to_fmt<T, '_, '_>(&'_ mut fmt::Write, &'_ str, T)\n-> Result<fmt::Result, Error> where T: AsRef<[u5]>","parent":null,"children":[],"decl_id":null,"docs":" Encode a bech32 payload to an [fmt::Write].\n This method is intended for implementing traits from [std::fmt].","sig":null,"attributes":[{"value":"/ Encode a bech32 payload to an [fmt::Write].","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":11566,"byte_end":11613,"line_start":375,"line_end":375,"column_start":1,"column_end":48}},{"value":"/ This method is intended for implementing traits from [std::fmt].","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":11614,"byte_end":11682,"line_start":376,"line_end":376,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":11683,"byte_end":11686,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":11687,"byte_end":11699,"line_start":378,"line_end":378,"column_start":1,"column_end":13}},{"value":"/ * If [check_hrp] returns an error for the given HRP.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":11700,"byte_end":11756,"line_start":379,"line_end":379,"column_start":1,"column_end":57}},{"value":"/ # Deviations from standard","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":11757,"byte_end":11787,"line_start":380,"line_end":380,"column_start":1,"column_end":31}},{"value":"/ * No length limits are enforced for the data part","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":11788,"byte_end":11841,"line_start":381,"line_end":381,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":82},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":12644,"byte_end":12650,"line_start":409,"line_end":409,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode","value":"fn encode<T, '_>(&'_ str, T) -> Result<String, Error> where T: AsRef<[u5]>","parent":null,"children":[],"decl_id":null,"docs":" Encode a bech32 payload to string.","sig":null,"attributes":[{"value":"/ Encode a bech32 payload to string.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":12439,"byte_end":12477,"line_start":403,"line_end":403,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":12478,"byte_end":12481,"line_start":404,"line_end":404,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":12482,"byte_end":12494,"line_start":405,"line_end":405,"column_start":1,"column_end":13}},{"value":"/ * If [check_hrp] returns an error for the given HRP.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":12495,"byte_end":12551,"line_start":406,"line_end":406,"column_start":1,"column_end":57}},{"value":"/ # Deviations from standard","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":12552,"byte_end":12582,"line_start":407,"line_end":407,"column_start":1,"column_end":31}},{"value":"/ * No length limits are enforced for the data part","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":12583,"byte_end":12636,"line_start":408,"line_end":408,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":12922,"byte_end":12928,"line_start":418,"line_end":418,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode","value":"fn decode<'_>(&'_ str) -> Result<(String, Vec<u5>), Error>","parent":null,"children":[],"decl_id":null,"docs":" Decode a bech32 string into the raw HRP and the data bytes.","sig":null,"attributes":[{"value":"/ Decode a bech32 string into the raw HRP and the data bytes.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":12812,"byte_end":12875,"line_start":415,"line_end":415,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":12876,"byte_end":12879,"line_start":416,"line_end":416,"column_start":1,"column_end":4}},{"value":"/ Returns the HRP in lowercase..","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":12880,"byte_end":12914,"line_start":417,"line_end":417,"column_start":1,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":143},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17402,"byte_end":17418,"line_start":559,"line_end":559,"column_start":5,"column_end":21},"name":"MissingSeparator","qualname":"::Error::MissingSeparator","value":"Error::MissingSeparator","parent":{"krate":0,"index":142},"children":[],"decl_id":null,"docs":" String does not contain the separator character\n","sig":null,"attributes":[{"value":"/ String does not contain the separator character","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17346,"byte_end":17397,"line_start":558,"line_end":558,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":145},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17481,"byte_end":17496,"line_start":561,"line_end":561,"column_start":5,"column_end":20},"name":"InvalidChecksum","qualname":"::Error::InvalidChecksum","value":"Error::InvalidChecksum","parent":{"krate":0,"index":142},"children":[],"decl_id":null,"docs":" The checksum does not match the rest of the data\n","sig":null,"attributes":[{"value":"/ The checksum does not match the rest of the data","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17424,"byte_end":17476,"line_start":560,"line_end":560,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":147},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17567,"byte_end":17580,"line_start":563,"line_end":563,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::Error::InvalidLength","value":"Error::InvalidLength","parent":{"krate":0,"index":142},"children":[],"decl_id":null,"docs":" The data or human-readable part is too long or too short\n","sig":null,"attributes":[{"value":"/ The data or human-readable part is too long or too short","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17502,"byte_end":17562,"line_start":562,"line_end":562,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":149},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17648,"byte_end":17659,"line_start":565,"line_end":565,"column_start":5,"column_end":16},"name":"InvalidChar","qualname":"::Error::InvalidChar","value":"Error::InvalidChar(char)","parent":{"krate":0,"index":142},"children":[],"decl_id":null,"docs":" Some part of the string contains an invalid character\n","sig":null,"attributes":[{"value":"/ Some part of the string contains an invalid character","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17586,"byte_end":17643,"line_start":564,"line_end":564,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":151},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17660,"byte_end":17664,"line_start":565,"line_end":565,"column_start":17,"column_end":21},"name":"0","qualname":"::Error::InvalidChar::0","value":"char","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":152},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17722,"byte_end":17733,"line_start":567,"line_end":567,"column_start":5,"column_end":16},"name":"InvalidData","qualname":"::Error::InvalidData","value":"Error::InvalidData(u8)","parent":{"krate":0,"index":142},"children":[],"decl_id":null,"docs":" Some part of the data has an invalid value\n","sig":null,"attributes":[{"value":"/ Some part of the data has an invalid value","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17671,"byte_end":17717,"line_start":566,"line_end":566,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":154},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17734,"byte_end":17736,"line_start":567,"line_end":567,"column_start":17,"column_end":19},"name":"0","qualname":"::Error::InvalidData::0","value":"u8","parent":{"krate":0,"index":152},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":155},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17800,"byte_end":17814,"line_start":569,"line_end":569,"column_start":5,"column_end":19},"name":"InvalidPadding","qualname":"::Error::InvalidPadding","value":"Error::InvalidPadding","parent":{"krate":0,"index":142},"children":[],"decl_id":null,"docs":" The bit conversion failed due to a padding issue\n","sig":null,"attributes":[{"value":"/ The bit conversion failed due to a padding issue","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17743,"byte_end":17795,"line_start":568,"line_end":568,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":157},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17865,"byte_end":17874,"line_start":571,"line_end":571,"column_start":5,"column_end":14},"name":"MixedCase","qualname":"::Error::MixedCase","value":"Error::MixedCase","parent":{"krate":0,"index":142},"children":[],"decl_id":null,"docs":" The whole string must be of one case\n","sig":null,"attributes":[{"value":"/ The whole string must be of one case","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17820,"byte_end":17860,"line_start":570,"line_end":570,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":142},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17334,"byte_end":17339,"line_start":557,"line_end":557,"column_start":10,"column_end":15},"name":"Error","qualname":"::Error","value":"enum Error {\n    MissingSeparator,\n    InvalidChecksum,\n    InvalidLength,\n    InvalidChar(char),\n    InvalidData(u8),\n    InvalidPadding,\n    MixedCase,\n}","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":157}],"decl_id":null,"docs":" Error types for Bech32 encoding / decoding\n","sig":null,"attributes":[{"value":"/ Error types for Bech32 encoding / decoding","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17210,"byte_end":17256,"line_start":555,"line_end":555,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17916,"byte_end":17919,"line_start":575,"line_end":575,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Error as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10295},"children":[],"decl_id":{"krate":2,"index":10296},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":18583,"byte_end":18594,"line_start":589,"line_end":589,"column_start":8,"column_end":19},"name":"description","qualname":"<Error as std::error::Error>::description","value":"fn description<'_>(&'_ Self) -> &'_ str","parent":{"krate":1,"index":2576},"children":[],"decl_id":{"krate":1,"index":2579},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":100},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19585,"byte_end":19597,"line_start":619,"line_end":619,"column_start":8,"column_end":20},"name":"convert_bits","qualname":"::convert_bits","value":"fn convert_bits<T, '_>(&'_ [T], u32, u32, bool) -> Result<Vec<u8>, Error>\nwhere T: Into<u8> + Copy","parent":null,"children":[],"decl_id":null,"docs":" Convert between bit sizes","sig":null,"attributes":[{"value":"/ Convert between bit sizes","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19079,"byte_end":19108,"line_start":602,"line_end":602,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19109,"byte_end":19112,"line_start":603,"line_end":603,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19113,"byte_end":19125,"line_start":604,"line_end":604,"column_start":1,"column_end":13}},{"value":"/ * `Error::InvalidData` if any element of `data` is out of range","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19126,"byte_end":19193,"line_start":605,"line_end":605,"column_start":1,"column_end":68}},{"value":"/ * `Error::InvalidPadding` if `pad == false` and the padding bits are not `0`","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19194,"byte_end":19274,"line_start":606,"line_end":606,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19275,"byte_end":19278,"line_start":607,"line_end":607,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19279,"byte_end":19291,"line_start":608,"line_end":608,"column_start":1,"column_end":13}},{"value":"/ Function will panic if attempting to convert `from` or `to` a bit size that","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19292,"byte_end":19371,"line_start":609,"line_end":609,"column_start":1,"column_end":80}},{"value":"/ is 0 or larger than 8 bits.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19372,"byte_end":19403,"line_start":610,"line_end":610,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19404,"byte_end":19407,"line_start":611,"line_end":611,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19408,"byte_end":19422,"line_start":612,"line_end":612,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19423,"byte_end":19426,"line_start":613,"line_end":613,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19427,"byte_end":19438,"line_start":614,"line_end":614,"column_start":1,"column_end":12}},{"value":"/ use bech32::convert_bits;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19439,"byte_end":19468,"line_start":615,"line_end":615,"column_start":1,"column_end":30}},{"value":"/ let base5 = convert_bits(&[0xff], 8, 5, true);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19469,"byte_end":19519,"line_start":616,"line_end":616,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(base5.unwrap(), vec![0x1f, 0x1c]);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19520,"byte_end":19569,"line_start":617,"line_end":617,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":19570,"byte_end":19577,"line_start":618,"line_end":618,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2717,"byte_end":2719,"line_start":66,"line_end":66,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3249,"byte_end":3251,"line_start":87,"line_end":87,"column_start":19,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3323,"byte_end":3325,"line_start":93,"line_end":93,"column_start":20,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3974,"byte_end":3986,"line_start":123,"line_end":123,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":5658,"byte_end":5670,"line_start":183,"line_end":183,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":5922,"byte_end":5934,"line_start":193,"line_end":193,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6421,"byte_end":6424,"line_start":210,"line_end":210,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6708,"byte_end":6711,"line_start":224,"line_end":224,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":7723,"byte_end":7724,"line_start":254,"line_end":254,"column_start":35,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":9492,"byte_end":9493,"line_start":298,"line_end":298,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":10110,"byte_end":10111,"line_start":319,"line_end":319,"column_start":51,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17901,"byte_end":17906,"line_start":574,"line_end":574,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":18568,"byte_end":18573,"line_start":588,"line_end":588,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":2717,"byte_end":2719,"line_start":66,"line_end":66,"column_start":6,"column_end":8},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3249,"byte_end":3251,"line_start":87,"line_end":87,"column_start":19,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":102},"to":{"krate":2,"index":3166}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3323,"byte_end":3325,"line_start":93,"line_end":93,"column_start":20,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":102},"to":{"krate":2,"index":3160}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":3974,"byte_end":3986,"line_start":123,"line_end":123,"column_start":10,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":28},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":5658,"byte_end":5670,"line_start":183,"line_end":183,"column_start":26,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":28},"to":{"krate":0,"index":24}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":5922,"byte_end":5934,"line_start":193,"line_end":193,"column_start":19,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":28},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6178,"byte_end":6183,"line_start":202,"line_end":202,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":45}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6421,"byte_end":6424,"line_start":210,"line_end":210,"column_start":22,"column_end":25},"kind":{"Impl":{"id":6}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":24}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":6708,"byte_end":6711,"line_start":224,"line_end":224,"column_start":21,"column_end":24},"kind":{"Impl":{"id":7}},"from":{"krate":5,"index":7780},"to":{"krate":0,"index":45}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":7593,"byte_end":7601,"line_start":249,"line_end":249,"column_start":22,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":55},"to":{"krate":0,"index":59}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":7723,"byte_end":7724,"line_start":254,"line_end":254,"column_start":35,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":62},"to":{"krate":0,"index":55}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":9492,"byte_end":9493,"line_start":298,"line_end":298,"column_start":36,"column_end":37},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":66},"to":{"krate":0,"index":59}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":10110,"byte_end":10111,"line_start":319,"line_end":319,"column_start":51,"column_end":52},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":74},"to":{"krate":0,"index":68}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":17901,"byte_end":17906,"line_start":574,"line_end":574,"column_start":23,"column_end":28},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":142},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/bech32-0.7.3/src/lib.rs","byte_start":18568,"byte_end":18573,"line_start":588,"line_end":588,"column_start":23,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":142},"to":{"krate":1,"index":2576}}]}