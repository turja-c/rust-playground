{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0","program":"/Users/turjachowdhury/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","futures_locks","--edition=2018","/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"tokio\"","-C","metadata=3974af904e23f845","-C","extra-filename=-3974af904e23f845","--out-dir","/Users/turjachowdhury/GitHub/rust-playground/eth/ethers/target/rls/debug/deps","-L","dependency=/Users/turjachowdhury/GitHub/rust-playground/eth/ethers/target/rls/debug/deps","--extern","futures_channel=/Users/turjachowdhury/GitHub/rust-playground/eth/ethers/target/rls/debug/deps/libfutures_channel-add4d1bfb78bcfcf.rmeta","--extern","futures_task=/Users/turjachowdhury/GitHub/rust-playground/eth/ethers/target/rls/debug/deps/libfutures_task-8f5aecd6c32432b2.rmeta","--extern","tokio=/Users/turjachowdhury/GitHub/rust-playground/eth/ethers/target/rls/debug/deps/libtokio-841dbf2fca8b8ec3.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/turjachowdhury/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/turjachowdhury/GitHub/rust-playground/eth/ethers/target/rls/debug/deps/libfutures_locks-3974af904e23f845.rmeta"},"prelude":{"crate_id":{"name":"futures_locks","disambiguator":[15262233342227070740,0]},"crate_root":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src","external_crates":[{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3177202280525429736,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14771084576412554041,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2214913233095760658,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14062411168213242900,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12076482825092298057,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[14222321261015582298,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8777242437552039366,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17835652209006724865,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[8739993533421390330,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[14051958152740382928,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[10065303707608660519,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[11544620977869425193,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[6400271788769952154,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[15384311983005613458,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[18308402029100966730,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[6407954677654987270,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[15697432329694890830,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[8370702540642071065,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[13043233986326649044,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":20,"id":{"name":"futures_channel","disambiguator":[9019469092809684545,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":21,"id":{"name":"futures_core","disambiguator":[8699272677329186135,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":22,"id":{"name":"futures_task","disambiguator":[18417935591013933675,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":23,"id":{"name":"tokio","disambiguator":[14512511767748884222,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":24,"id":{"name":"mio","disambiguator":[13579241178913253437,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":25,"id":{"name":"log","disambiguator":[16472255942076599003,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":26,"id":{"name":"cfg_if","disambiguator":[4590009807048894466,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":27,"id":{"name":"libc","disambiguator":[4734073794903943432,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":28,"id":{"name":"pin_project_lite","disambiguator":[13538260751834456167,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":29,"id":{"name":"bytes","disambiguator":[1145573965042969789,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":30,"id":{"name":"serde","disambiguator":[8563986749973328371,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":31,"id":{"name":"serde_derive","disambiguator":[8343864943583289220,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":32,"id":{"name":"memchr","disambiguator":[13130618782193109137,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":33,"id":{"name":"socket2","disambiguator":[11248702686171348296,0]}},{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","num":34,"id":{"name":"num_cpus","disambiguator":[11049082887327844334,0]}}],"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":15,"byte_end":1672,"line_start":3,"line_end":59,"column_start":1,"column_end":38}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":340},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":975,"byte_end":980,"line_start":34,"line_end":34,"column_start":17,"column_end":22},"alias_span":null,"name":"Mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":60},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":982,"byte_end":990,"line_start":34,"line_end":34,"column_start":24,"column_end":32},"alias_span":null,"name":"MutexFut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":311},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":992,"byte_end":1002,"line_start":34,"line_end":34,"column_start":34,"column_end":44},"alias_span":null,"name":"MutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":334},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":1004,"byte_end":1013,"line_start":34,"line_end":34,"column_start":46,"column_end":55},"alias_span":null,"name":"MutexWeak","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":380},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":1033,"byte_end":1039,"line_start":35,"line_end":35,"column_start":18,"column_end":24},"alias_span":null,"name":"RwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":183},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":1041,"byte_end":1054,"line_start":35,"line_end":35,"column_start":26,"column_end":39},"alias_span":null,"name":"RwLockReadFut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":197},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":1056,"byte_end":1070,"line_start":35,"line_end":35,"column_start":41,"column_end":55},"alias_span":null,"name":"RwLockWriteFut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":349},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":1089,"byte_end":1104,"line_start":36,"line_end":36,"column_start":18,"column_end":33},"alias_span":null,"name":"RwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":355},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":1106,"byte_end":1122,"line_start":36,"line_end":36,"column_start":35,"column_end":51},"alias_span":null,"name":"RwLockWriteGuard","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":15,"byte_end":1672,"line_start":3,"line_end":59,"column_start":1,"column_end":38},"name":"","qualname":"::","value":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":119},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":389},{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":308},{"krate":0,"index":310}],"decl_id":null,"docs":"  A library of [`Futures`]-aware locking primitives.  These locks can safely\n  be used in asynchronous environments like [`Tokio`].  When they block,\n  they'll only block a single task, not the entire reactor.","sig":null,"attributes":[{"value":"/  A library of [`Futures`]-aware locking primitives.  These locks can safely","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":15,"byte_end":94,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/  be used in asynchronous environments like [`Tokio`].  When they block,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":95,"byte_end":170,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/  they'll only block a single task, not the entire reactor.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":171,"byte_end":233,"line_start":5,"line_end":5,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":234,"byte_end":237,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/  These primitives generally work much like their counterparts from the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":238,"byte_end":312,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"/  standard library.  But instead of blocking, they return a `Future` that","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":313,"byte_end":389,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/  completes when the lock has been acquired.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":390,"byte_end":437,"line_start":9,"line_end":9,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":438,"byte_end":441,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":442,"byte_end":456,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":457,"byte_end":460,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":461,"byte_end":468,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":469,"byte_end":496,"line_start":14,"line_end":14,"column_start":1,"column_end":28}},{"value":"/ # use futures::executor::block_on;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":497,"byte_end":535,"line_start":15,"line_end":15,"column_start":1,"column_end":39}},{"value":"/ # use futures::{Future, FutureExt};","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":536,"byte_end":575,"line_start":16,"line_end":16,"column_start":1,"column_end":40}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":576,"byte_end":593,"line_start":17,"line_end":17,"column_start":1,"column_end":18}},{"value":"/ let mtx = Mutex::<u32>::new(0);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":594,"byte_end":629,"line_start":18,"line_end":18,"column_start":1,"column_end":36}},{"value":"/ let fut = mtx.lock().map(|mut guard| { *guard += 5; });","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":630,"byte_end":689,"line_start":19,"line_end":19,"column_start":1,"column_end":60}},{"value":"/ block_on(fut);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":690,"byte_end":708,"line_start":20,"line_end":20,"column_start":1,"column_end":19}},{"value":"/ assert_eq!(mtx.try_unwrap().unwrap(), 5);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":709,"byte_end":754,"line_start":21,"line_end":21,"column_start":1,"column_end":46}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":755,"byte_end":762,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":763,"byte_end":770,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":771,"byte_end":774,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`Futures`]: https://github.com/rust-lang-nursery/futures-rs","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":775,"byte_end":839,"line_start":25,"line_end":25,"column_start":1,"column_end":65}},{"value":"/ [`Tokio`]: https:/tokio.rs","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":840,"byte_end":870,"line_start":26,"line_end":26,"column_start":1,"column_end":31}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":911,"byte_end":933,"line_start":29,"line_end":29,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":311},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2161,"byte_end":2171,"line_start":20,"line_end":20,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":313}],"decl_id":null,"docs":" An RAII mutex guard, much like `std::sync::MutexGuard`.  The wrapped data\n can be accessed via its `Deref` and `DerefMut` implementations.\n","sig":null,"attributes":[{"value":"/ An RAII mutex guard, much like `std::sync::MutexGuard`.  The wrapped data","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":1987,"byte_end":2064,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ can be accessed via its `Deref` and `DerefMut` implementations.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2065,"byte_end":2132,"line_start":18,"line_end":18,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2256,"byte_end":2260,"line_start":25,"line_end":25,"column_start":8,"column_end":12},"name":"drop","qualname":"<MutexGuard<T> as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3510},"children":[],"decl_id":{"krate":2,"index":3511},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2383,"byte_end":2388,"line_start":33,"line_end":33,"column_start":8,"column_end":13},"name":"deref","qualname":"<MutexGuard<T> as std::ops::Deref>::deref","value":"fn deref<'_>(&'_ Self) -> &'_ T","parent":{"krate":2,"index":3486},"children":[],"decl_id":{"krate":2,"index":3488},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2512,"byte_end":2521,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"<MutexGuard<T> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut<'_>(&'_ mut Self) -> &'_ mut T","parent":{"krate":2,"index":3499},"children":[],"decl_id":{"krate":2,"index":3500},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":60},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2675,"byte_end":2683,"line_start":45,"line_end":45,"column_start":12,"column_end":20},"name":"MutexFut","qualname":"::mutex::MutexFut","value":"MutexFut {  }","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63}],"decl_id":null,"docs":" A `Future` representing a pending `Mutex` acquisition.\n","sig":null,"attributes":[{"value":"/ A `Future` representing a pending `Mutex` acquisition.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2605,"byte_end":2663,"line_start":44,"line_end":44,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2913,"byte_end":2917,"line_start":57,"line_end":57,"column_start":8,"column_end":12},"name":"drop","qualname":"<MutexFut<T> as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3510},"children":[],"decl_id":{"krate":2,"index":3511},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":4059,"byte_end":4063,"line_start":90,"line_end":90,"column_start":8,"column_end":12},"name":"poll","qualname":"<MutexFut<T> as std::future::Future>::poll","value":"fn poll<'_, '_, '_>(Pin<&'_ mut Self>, &'_ mut Context) -> Poll<Self::Output>","parent":{"krate":2,"index":13763},"children":[],"decl_id":{"krate":2,"index":13765},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":334},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6530,"byte_end":6539,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"MutexWeak","qualname":"::mutex::MutexWeak","value":"MutexWeak {  }","parent":null,"children":[{"krate":0,"index":336}],"decl_id":null,"docs":" `MutexWeak` is a non-owning reference to a [`Mutex`].  `MutexWeak` is to\n [`Mutex`] as [`std::sync::Weak`] is to [`std::sync::Arc`].","sig":null,"attributes":[{"value":"/ `MutexWeak` is a non-owning reference to a [`Mutex`].  `MutexWeak` is to","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":5931,"byte_end":6007,"line_start":140,"line_end":140,"column_start":1,"column_end":77}},{"value":"/ [`Mutex`] as [`std::sync::Weak`] is to [`std::sync::Arc`].","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6008,"byte_end":6070,"line_start":141,"line_end":141,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6071,"byte_end":6074,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6075,"byte_end":6089,"line_start":143,"line_end":143,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6090,"byte_end":6097,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ # use futures_locks::{Mutex,MutexGuard};","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6098,"byte_end":6142,"line_start":145,"line_end":145,"column_start":1,"column_end":45}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6143,"byte_end":6160,"line_start":146,"line_end":146,"column_start":1,"column_end":18}},{"value":"/ let mutex = Mutex::<u32>::new(0);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6161,"byte_end":6198,"line_start":147,"line_end":147,"column_start":1,"column_end":38}},{"value":"/ let mutex_weak = Mutex::downgrade(&mutex);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6199,"byte_end":6245,"line_start":148,"line_end":148,"column_start":1,"column_end":47}},{"value":"/ let mutex_new = mutex_weak.upgrade().unwrap();","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6246,"byte_end":6296,"line_start":149,"line_end":149,"column_start":1,"column_end":51}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6297,"byte_end":6304,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6305,"byte_end":6312,"line_start":151,"line_end":151,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6313,"byte_end":6316,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ [`Mutex`]: struct.Mutex.html","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6317,"byte_end":6349,"line_start":153,"line_end":153,"column_start":1,"column_end":33}},{"value":"/ [`std::sync::Weak`]: https://doc.rust-lang.org/std/sync/struct.Weak.html","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6350,"byte_end":6426,"line_start":154,"line_end":154,"column_start":1,"column_end":77}},{"value":"/ [`std::sync::Arc`]: https://doc.rust-lang.org/std/sync/struct.Arc.html","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6427,"byte_end":6501,"line_start":155,"line_end":155,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6752,"byte_end":6759,"line_start":164,"line_end":164,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<MutexWeak<T>>::upgrade","value":"fn upgrade<'_>(&'_ Self) -> Option<Mutex<T>>","parent":null,"children":[],"decl_id":null,"docs":" Tries to upgrade the `MutexWeak` to `Mutex`. If the `Mutex` was dropped\n then the function return `None`.\n","sig":null,"attributes":[{"value":"/ Tries to upgrade the `MutexWeak` to `Mutex`. If the `Mutex` was dropped","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6624,"byte_end":6699,"line_start":162,"line_end":162,"column_start":5,"column_end":80}},{"value":"/ then the function return `None`.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6704,"byte_end":6740,"line_start":163,"line_end":163,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6959,"byte_end":6964,"line_start":173,"line_end":173,"column_start":8,"column_end":13},"name":"clone","qualname":"<MutexWeak<T> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> MutexWeak<T>","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":340},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8180,"byte_end":8185,"line_start":207,"line_end":207,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":342}],"decl_id":null,"docs":" A Futures-aware Mutex.","sig":null,"attributes":[{"value":"/ A Futures-aware Mutex.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7347,"byte_end":7373,"line_start":184,"line_end":184,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7374,"byte_end":7377,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ `std::sync::Mutex` cannot be used in an asynchronous environment like Tokio,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7378,"byte_end":7458,"line_start":186,"line_end":186,"column_start":1,"column_end":81}},{"value":"/ because a mutex acquisition can block an entire reactor.  This class can be","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7459,"byte_end":7538,"line_start":187,"line_end":187,"column_start":1,"column_end":80}},{"value":"/ used instead.  It functions much like `std::sync::Mutex`.  Unlike that","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7539,"byte_end":7613,"line_start":188,"line_end":188,"column_start":1,"column_end":75}},{"value":"/ class, it also has a builtin `Arc`, making it accessible from multiple","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7614,"byte_end":7688,"line_start":189,"line_end":189,"column_start":1,"column_end":75}},{"value":"/ threads.  It's also safe to `clone`.  Also unlike `std::sync::Mutex`, this","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7689,"byte_end":7767,"line_start":190,"line_end":190,"column_start":1,"column_end":79}},{"value":"/ class does not detect lock poisoning.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7768,"byte_end":7809,"line_start":191,"line_end":191,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7810,"byte_end":7813,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7814,"byte_end":7828,"line_start":193,"line_end":193,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7829,"byte_end":7832,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7833,"byte_end":7840,"line_start":195,"line_end":195,"column_start":1,"column_end":8}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7841,"byte_end":7868,"line_start":196,"line_end":196,"column_start":1,"column_end":28}},{"value":"/ # use futures::executor::block_on;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7869,"byte_end":7907,"line_start":197,"line_end":197,"column_start":1,"column_end":39}},{"value":"/ # use futures::{Future, FutureExt};","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7908,"byte_end":7947,"line_start":198,"line_end":198,"column_start":1,"column_end":40}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7948,"byte_end":7965,"line_start":199,"line_end":199,"column_start":1,"column_end":18}},{"value":"/ let mtx = Mutex::<u32>::new(0);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7966,"byte_end":8001,"line_start":200,"line_end":200,"column_start":1,"column_end":36}},{"value":"/ let fut = mtx.lock().map(|mut guard| { *guard += 5; });","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8002,"byte_end":8061,"line_start":201,"line_end":201,"column_start":1,"column_end":60}},{"value":"/ block_on(fut);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8062,"byte_end":8080,"line_start":202,"line_end":202,"column_start":1,"column_end":19}},{"value":"/ assert_eq!(mtx.try_unwrap().unwrap(), 5);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8081,"byte_end":8126,"line_start":203,"line_end":203,"column_start":1,"column_end":46}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8127,"byte_end":8134,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8135,"byte_end":8142,"line_start":205,"line_end":205,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8278,"byte_end":8283,"line_start":212,"line_end":212,"column_start":8,"column_end":13},"name":"clone","qualname":"<Mutex<T> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Mutex<T>","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8439,"byte_end":8442,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<T>>::new","value":"fn new(T) -> Mutex<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Mutex` in the unlocked state.\n","sig":null,"attributes":[{"value":"/ Create a new `Mutex` in the unlocked state.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8380,"byte_end":8427,"line_start":218,"line_end":218,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8986,"byte_end":8996,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"try_unwrap","qualname":"<Mutex<T>>::try_unwrap","value":"fn try_unwrap(Self) -> Result<T, Mutex<T>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Mutex` and returns the wrapped data.  If the `Mutex` still\n has multiple references (not necessarily locked), returns a copy of\n `self` instead.\n","sig":null,"attributes":[{"value":"/ Consumes the `Mutex` and returns the wrapped data.  If the `Mutex` still","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8798,"byte_end":8874,"line_start":231,"line_end":231,"column_start":5,"column_end":81}},{"value":"/ has multiple references (not necessarily locked), returns a copy of","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8879,"byte_end":8950,"line_start":232,"line_end":232,"column_start":5,"column_end":76}},{"value":"/ `self` instead.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8955,"byte_end":8974,"line_start":233,"line_end":233,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":9576,"byte_end":9585,"line_start":251,"line_end":251,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<Mutex<T>>::downgrade","value":"fn downgrade<'_>(&'_ Mutex<T>) -> MutexWeak<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a [`MutexWeak`] reference to this `Mutex`.","sig":null,"attributes":[{"value":"/ Create a [`MutexWeak`] reference to this `Mutex`.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":9458,"byte_end":9511,"line_start":248,"line_end":248,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":9516,"byte_end":9519,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ [`MutexWeak`]: struct.MutexWeak.html","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":9524,"byte_end":9564,"line_start":250,"line_end":250,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10336,"byte_end":10343,"line_start":273,"line_end":273,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<T>>::get_mut","value":"fn get_mut<'_>(&'_ mut Self) -> Option<&'_ mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying data, if there are no other\n clones of the `Mutex`.","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying data, if there are no other","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":9705,"byte_end":9774,"line_start":255,"line_end":255,"column_start":5,"column_end":74}},{"value":"/ clones of the `Mutex`.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":9779,"byte_end":9805,"line_start":256,"line_end":256,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":9810,"byte_end":9813,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking takes","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":9818,"byte_end":9890,"line_start":258,"line_end":258,"column_start":5,"column_end":77}},{"value":"/ place -- the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":9895,"byte_end":9964,"line_start":259,"line_end":259,"column_start":5,"column_end":74}},{"value":"/ However, if the `Mutex` has already been cloned, then `None` will be","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":9969,"byte_end":10041,"line_start":260,"line_end":260,"column_start":5,"column_end":77}},{"value":"/ returned instead.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10046,"byte_end":10067,"line_start":261,"line_end":261,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10072,"byte_end":10075,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10080,"byte_end":10094,"line_start":263,"line_end":263,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10099,"byte_end":10102,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10107,"byte_end":10114,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10119,"byte_end":10146,"line_start":266,"line_end":266,"column_start":5,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10151,"byte_end":10168,"line_start":267,"line_end":267,"column_start":5,"column_end":22}},{"value":"/ let mut mtx = Mutex::<u32>::new(0);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10173,"byte_end":10212,"line_start":268,"line_end":268,"column_start":5,"column_end":44}},{"value":"/ *mtx.get_mut().unwrap() += 5;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10217,"byte_end":10250,"line_start":269,"line_end":269,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(mtx.try_unwrap().unwrap(), 5);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10255,"byte_end":10300,"line_start":270,"line_end":270,"column_start":5,"column_end":50}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10305,"byte_end":10312,"line_start":271,"line_end":271,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10317,"byte_end":10324,"line_start":272,"line_end":272,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10874,"byte_end":10878,"line_start":287,"line_end":287,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<T>>::lock","value":"fn lock<'_>(&'_ Self) -> MutexFut<T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a `Mutex`, blocking the task in the meantime.  When the\n returned `Future` is ready, this task will have sole access to the\n protected data.\n","sig":null,"attributes":[{"value":"/ Acquires a `Mutex`, blocking the task in the meantime.  When the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10695,"byte_end":10763,"line_start":284,"line_end":284,"column_start":5,"column_end":73}},{"value":"/ returned `Future` is ready, this task will have sole access to the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10768,"byte_end":10838,"line_start":285,"line_end":285,"column_start":5,"column_end":75}},{"value":"/ protected data.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10843,"byte_end":10862,"line_start":286,"line_end":286,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11435,"byte_end":11443,"line_start":307,"line_end":307,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<T>>::try_lock","value":"fn try_lock<'_>(&'_ Self) -> Result<MutexGuard<T>, TryLockError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire the lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire the lock.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":10965,"byte_end":10998,"line_start":291,"line_end":291,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11003,"byte_end":11006,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ If the operation would block, returns `Err` instead.  Otherwise, returns","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11011,"byte_end":11087,"line_start":293,"line_end":293,"column_start":5,"column_end":81}},{"value":"/ a guard (not a `Future`).","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11092,"byte_end":11121,"line_start":294,"line_end":294,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11126,"byte_end":11129,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11134,"byte_end":11148,"line_start":296,"line_end":296,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11153,"byte_end":11160,"line_start":297,"line_end":297,"column_start":5,"column_end":12}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11165,"byte_end":11192,"line_start":298,"line_end":298,"column_start":5,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11197,"byte_end":11214,"line_start":299,"line_end":299,"column_start":5,"column_end":22}},{"value":"/ let mut mtx = Mutex::<u32>::new(0);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11219,"byte_end":11258,"line_start":300,"line_end":300,"column_start":5,"column_end":44}},{"value":"/ match mtx.try_lock() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11263,"byte_end":11289,"line_start":301,"line_end":301,"column_start":5,"column_end":31}},{"value":"/     Ok(mut guard) => *guard += 5,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11294,"byte_end":11331,"line_start":302,"line_end":302,"column_start":5,"column_end":42}},{"value":"/     Err(_) => println!(\"Better luck next time!\")","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11336,"byte_end":11388,"line_start":303,"line_end":303,"column_start":5,"column_end":57}},{"value":"/ };","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11393,"byte_end":11399,"line_start":304,"line_end":304,"column_start":5,"column_end":11}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11404,"byte_end":11411,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":11416,"byte_end":11423,"line_start":306,"line_end":306,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":12285,"byte_end":12291,"line_start":333,"line_end":333,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<Mutex<T>>::ptr_eq","value":"fn ptr_eq<'_, '_>(&'_ Mutex<T>, &'_ Mutex<T>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the two `Mutex` point to the same data else false.\n","sig":null,"attributes":[{"value":"/ Returns true if the two `Mutex` point to the same data else false.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":12203,"byte_end":12273,"line_start":332,"line_end":332,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13730,"byte_end":13734,"line_start":371,"line_end":371,"column_start":12,"column_end":16},"name":"with","qualname":"<Mutex<T>>::with","value":"fn with<B, F, R, '_>(&'_ Self, F) -> /*impl Trait*/ where\nF: FnOnce(MutexGuard<T>) -> B + Send + 'static, B: Future<Output = R> + Send +\n'static, R: Send + 'static, T: Send","parent":null,"children":[],"decl_id":null,"docs":" Acquires a `Mutex` and performs a computation on its guarded value in a\n separate task.  Returns a `Future` containing the result of the\n computation.","sig":null,"attributes":[{"value":"/ Acquires a `Mutex` and performs a computation on its guarded value in a","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":12440,"byte_end":12515,"line_start":339,"line_end":339,"column_start":5,"column_end":80}},{"value":"/ separate task.  Returns a `Future` containing the result of the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":12520,"byte_end":12587,"line_start":340,"line_end":340,"column_start":5,"column_end":72}},{"value":"/ computation.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":12592,"byte_end":12608,"line_start":341,"line_end":341,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":12613,"byte_end":12616,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ When using Tokio, this method will often hold the `Mutex` for less time","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":12621,"byte_end":12696,"line_start":343,"line_end":343,"column_start":5,"column_end":80}},{"value":"/ than chaining a computation to [`lock`](#method.lock).  The reason is","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":12701,"byte_end":12774,"line_start":344,"line_end":344,"column_start":5,"column_end":78}},{"value":"/ that Tokio polls all tasks promptly upon notification.  However, Tokio","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":12779,"byte_end":12853,"line_start":345,"line_end":345,"column_start":5,"column_end":79}},{"value":"/ does not guarantee that it will poll all futures promptly when their","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":12858,"byte_end":12930,"line_start":346,"line_end":346,"column_start":5,"column_end":77}},{"value":"/ owning task gets notified.  So it's best to hold `Mutex`es within their","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":12935,"byte_end":13010,"line_start":347,"line_end":347,"column_start":5,"column_end":80}},{"value":"/ own tasks, lest their continuations get blocked by slow stacked","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13015,"byte_end":13082,"line_start":348,"line_end":348,"column_start":5,"column_end":72}},{"value":"/ combinators.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13087,"byte_end":13103,"line_start":349,"line_end":349,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13108,"byte_end":13111,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13116,"byte_end":13130,"line_start":351,"line_end":351,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13135,"byte_end":13138,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13143,"byte_end":13150,"line_start":353,"line_end":353,"column_start":5,"column_end":12}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13155,"byte_end":13182,"line_start":354,"line_end":354,"column_start":5,"column_end":32}},{"value":"/ # use futures::{Future, future::ready};","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13187,"byte_end":13230,"line_start":355,"line_end":355,"column_start":5,"column_end":48}},{"value":"/ # use tokio::runtime::Runtime;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13235,"byte_end":13269,"line_start":356,"line_end":356,"column_start":5,"column_end":39}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13274,"byte_end":13291,"line_start":357,"line_end":357,"column_start":5,"column_end":22}},{"value":"/ let mtx = Mutex::<u32>::new(0);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13296,"byte_end":13331,"line_start":358,"line_end":358,"column_start":5,"column_end":40}},{"value":"/ let mut rt = Runtime::new().unwrap();","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13336,"byte_end":13377,"line_start":359,"line_end":359,"column_start":5,"column_end":46}},{"value":"/ rt.block_on(async {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13382,"byte_end":13405,"line_start":360,"line_end":360,"column_start":5,"column_end":28}},{"value":"/     mtx.with(|mut guard| {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13410,"byte_end":13440,"line_start":361,"line_end":361,"column_start":5,"column_end":35}},{"value":"/         *guard += 5;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13445,"byte_end":13469,"line_start":362,"line_end":362,"column_start":5,"column_end":29}},{"value":"/         ready::<()>(())","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13474,"byte_end":13501,"line_start":363,"line_end":363,"column_start":5,"column_end":32}},{"value":"/     }).await","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13506,"byte_end":13522,"line_start":364,"line_end":364,"column_start":5,"column_end":21}},{"value":"/ });","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13527,"byte_end":13534,"line_start":365,"line_end":365,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(mtx.try_unwrap().unwrap(), 5);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13539,"byte_end":13584,"line_start":366,"line_end":366,"column_start":5,"column_end":50}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13589,"byte_end":13596,"line_start":367,"line_end":367,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13601,"byte_end":13608,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":13613,"byte_end":13665,"line_start":369,"line_end":369,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":15023,"byte_end":15033,"line_start":411,"line_end":411,"column_start":12,"column_end":22},"name":"with_local","qualname":"<Mutex<T>>::with_local","value":"fn with_local<B, F, R, '_>(&'_ Self, F) -> /*impl Trait*/ where\nF: FnOnce(MutexGuard<T>) -> B + 'static, B: Future<Output = R> + 'static +\nUnpin, R: 'static","parent":null,"children":[],"decl_id":null,"docs":" Like [`with`](#method.with) but for Futures that aren't `Send`.\n Spawns a new task on a single-threaded Runtime to complete the Future.","sig":null,"attributes":[{"value":"/ Like [`with`](#method.with) but for Futures that aren't `Send`.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14147,"byte_end":14214,"line_start":386,"line_end":386,"column_start":5,"column_end":72}},{"value":"/ Spawns a new task on a single-threaded Runtime to complete the Future.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14219,"byte_end":14293,"line_start":387,"line_end":387,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14298,"byte_end":14301,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14306,"byte_end":14320,"line_start":389,"line_end":389,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14325,"byte_end":14328,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14333,"byte_end":14340,"line_start":391,"line_end":391,"column_start":5,"column_end":12}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14345,"byte_end":14372,"line_start":392,"line_end":392,"column_start":5,"column_end":32}},{"value":"/ # use futures::{Future, future::ready};","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14377,"byte_end":14420,"line_start":393,"line_end":393,"column_start":5,"column_end":48}},{"value":"/ # use std::rc::Rc;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14425,"byte_end":14447,"line_start":394,"line_end":394,"column_start":5,"column_end":27}},{"value":"/ # use tokio::runtime::Runtime;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14452,"byte_end":14486,"line_start":395,"line_end":395,"column_start":5,"column_end":39}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14491,"byte_end":14508,"line_start":396,"line_end":396,"column_start":5,"column_end":22}},{"value":"/ // Note: Rc is not `Send`","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14513,"byte_end":14542,"line_start":397,"line_end":397,"column_start":5,"column_end":34}},{"value":"/ let mtx = Mutex::<Rc<u32>>::new(Rc::new(0));","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14547,"byte_end":14595,"line_start":398,"line_end":398,"column_start":5,"column_end":53}},{"value":"/ let mut rt = Runtime::new().unwrap();","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14600,"byte_end":14641,"line_start":399,"line_end":399,"column_start":5,"column_end":46}},{"value":"/ rt.block_on(async {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14646,"byte_end":14669,"line_start":400,"line_end":400,"column_start":5,"column_end":28}},{"value":"/     mtx.with_local(|mut guard| {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14674,"byte_end":14710,"line_start":401,"line_end":401,"column_start":5,"column_end":41}},{"value":"/         *Rc::get_mut(&mut *guard).unwrap() += 5;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14715,"byte_end":14767,"line_start":402,"line_end":402,"column_start":5,"column_end":57}},{"value":"/         ready(())","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14772,"byte_end":14793,"line_start":403,"line_end":403,"column_start":5,"column_end":26}},{"value":"/     }).await","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14798,"byte_end":14814,"line_start":404,"line_end":404,"column_start":5,"column_end":21}},{"value":"/ });","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14819,"byte_end":14826,"line_start":405,"line_end":405,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(*mtx.try_unwrap().unwrap(), 5);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14831,"byte_end":14877,"line_start":406,"line_end":406,"column_start":5,"column_end":51}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14882,"byte_end":14889,"line_start":407,"line_end":407,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14894,"byte_end":14901,"line_start":408,"line_end":408,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":14906,"byte_end":14958,"line_start":409,"line_end":409,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":349},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":16669,"byte_end":16684,"line_start":20,"line_end":20,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":351}],"decl_id":null,"docs":" An RAII guard, much like `std::sync::RwLockReadGuard`.  The wrapped data can\n be accessed via its `Deref` implementation.\n","sig":null,"attributes":[{"value":"/ An RAII guard, much like `std::sync::RwLockReadGuard`.  The wrapped data can","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":16512,"byte_end":16592,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ be accessed via its `Deref` implementation.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":16593,"byte_end":16640,"line_start":18,"line_end":18,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":16799,"byte_end":16804,"line_start":27,"line_end":27,"column_start":8,"column_end":13},"name":"deref","qualname":"<RwLockReadGuard<T> as std::ops::Deref>::deref","value":"fn deref<'_>(&'_ Self) -> &'_ T","parent":{"krate":2,"index":3486},"children":[],"decl_id":{"krate":2,"index":3488},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":16930,"byte_end":16934,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"drop","qualname":"<RwLockReadGuard<T> as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3510},"children":[],"decl_id":{"krate":2,"index":3511},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":355},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17169,"byte_end":17185,"line_start":41,"line_end":41,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":357}],"decl_id":null,"docs":" An RAII guard, much like `std::sync::RwLockWriteGuard`.  The wrapped data\n can be accessed via its `Deref`  and `DerefMut` implementations.\n","sig":null,"attributes":[{"value":"/ An RAII guard, much like `std::sync::RwLockWriteGuard`.  The wrapped data","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":16994,"byte_end":17071,"line_start":38,"line_end":38,"column_start":1,"column_end":78}},{"value":"/ can be accessed via its `Deref`  and `DerefMut` implementations.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17072,"byte_end":17140,"line_start":39,"line_end":39,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17301,"byte_end":17306,"line_start":48,"line_end":48,"column_start":8,"column_end":13},"name":"deref","qualname":"<RwLockWriteGuard<T> as std::ops::Deref>::deref","value":"fn deref<'_>(&'_ Self) -> &'_ T","parent":{"krate":2,"index":3486},"children":[],"decl_id":{"krate":2,"index":3488},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17437,"byte_end":17446,"line_start":54,"line_end":54,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"<RwLockWriteGuard<T> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut<'_>(&'_ mut Self) -> &'_ mut T","parent":{"krate":2,"index":3499},"children":[],"decl_id":{"krate":2,"index":3500},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17585,"byte_end":17589,"line_start":60,"line_end":60,"column_start":8,"column_end":12},"name":"drop","qualname":"<RwLockWriteGuard<T> as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3510},"children":[],"decl_id":{"krate":2,"index":3511},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":183},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17727,"byte_end":17740,"line_start":66,"line_end":66,"column_start":12,"column_end":25},"name":"RwLockReadFut","qualname":"::rwlock::RwLockReadFut","value":"RwLockReadFut {  }","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186}],"decl_id":null,"docs":" A `Future` representing a pending `RwLock` shared acquisition.\n","sig":null,"attributes":[{"value":"/ A `Future` representing a pending `RwLock` shared acquisition.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17649,"byte_end":17715,"line_start":65,"line_end":65,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17990,"byte_end":17994,"line_start":78,"line_end":78,"column_start":8,"column_end":12},"name":"drop","qualname":"<RwLockReadFut<T> as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3510},"children":[],"decl_id":{"krate":2,"index":3511},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":19157,"byte_end":19161,"line_start":111,"line_end":111,"column_start":8,"column_end":12},"name":"poll","qualname":"<RwLockReadFut<T> as std::future::Future>::poll","value":"fn poll<'_, '_, '_>(Pin<&'_ mut Self>, &'_ mut Context) -> Poll<Self::Output>","parent":{"krate":2,"index":13763},"children":[],"decl_id":{"krate":2,"index":13765},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":197},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":20882,"byte_end":20896,"line_start":149,"line_end":149,"column_start":12,"column_end":26},"name":"RwLockWriteFut","qualname":"::rwlock::RwLockWriteFut","value":"RwLockWriteFut {  }","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200}],"decl_id":null,"docs":" A `Future` representing a pending `RwLock` exclusive acquisition.\n","sig":null,"attributes":[{"value":"/ A `Future` representing a pending `RwLock` exclusive acquisition.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":20801,"byte_end":20870,"line_start":148,"line_end":148,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":21149,"byte_end":21153,"line_start":161,"line_end":161,"column_start":8,"column_end":12},"name":"drop","qualname":"<RwLockWriteFut<T> as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3510},"children":[],"decl_id":{"krate":2,"index":3511},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":22319,"byte_end":22323,"line_start":194,"line_end":194,"column_start":8,"column_end":12},"name":"poll","qualname":"<RwLockWriteFut<T> as std::future::Future>::poll","value":"fn poll<'_, '_, '_>(Pin<&'_ mut Self>, &'_ mut Context) -> Poll<Self::Output>","parent":{"krate":2,"index":13763},"children":[],"decl_id":{"krate":2,"index":13765},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":380},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":25018,"byte_end":25024,"line_start":261,"line_end":261,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":382}],"decl_id":null,"docs":" A Futures-aware RwLock.","sig":null,"attributes":[{"value":"/ A Futures-aware RwLock.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":24519,"byte_end":24546,"line_start":252,"line_end":252,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":24547,"byte_end":24550,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ `std::sync::RwLock` cannot be used in an asynchronous environment like","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":24551,"byte_end":24625,"line_start":254,"line_end":254,"column_start":1,"column_end":75}},{"value":"/ Tokio, because an acquisition can block an entire reactor.  This class can","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":24626,"byte_end":24704,"line_start":255,"line_end":255,"column_start":1,"column_end":79}},{"value":"/ be used instead.  It functions much like `std::sync::RwLock`.  Unlike that","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":24705,"byte_end":24783,"line_start":256,"line_end":256,"column_start":1,"column_end":79}},{"value":"/ class, it also has a builtin `Arc`, making it accessible from multiple","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":24784,"byte_end":24858,"line_start":257,"line_end":257,"column_start":1,"column_end":75}},{"value":"/ threads.  It's also safe to `clone`.  Also unlike `std::sync::RwLock`, this","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":24859,"byte_end":24938,"line_start":258,"line_end":258,"column_start":1,"column_end":80}},{"value":"/ class does not detect lock poisoning.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":24939,"byte_end":24980,"line_start":259,"line_end":259,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":25118,"byte_end":25123,"line_start":266,"line_end":266,"column_start":8,"column_end":13},"name":"clone","qualname":"<RwLock<T> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> RwLock<T>","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":25283,"byte_end":25286,"line_start":273,"line_end":273,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<T>>::new","value":"fn new(T) -> RwLock<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `RwLock` in the unlocked state.\n","sig":null,"attributes":[{"value":"/ Create a new `RwLock` in the unlocked state.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":25223,"byte_end":25271,"line_start":272,"line_end":272,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":25955,"byte_end":25965,"line_start":290,"line_end":290,"column_start":12,"column_end":22},"name":"try_unwrap","qualname":"<RwLock<T>>::try_unwrap","value":"fn try_unwrap(Self) -> Result<T, RwLock<T>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `RwLock` and returns the wrapped data.  If the `RwLock`\n still has multiple references (not necessarily locked), returns a copy\n of `self` instead.\n","sig":null,"attributes":[{"value":"/ Consumes the `RwLock` and returns the wrapped data.  If the `RwLock`","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":25765,"byte_end":25837,"line_start":287,"line_end":287,"column_start":5,"column_end":77}},{"value":"/ still has multiple references (not necessarily locked), returns a copy","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":25842,"byte_end":25916,"line_start":288,"line_end":288,"column_start":5,"column_end":79}},{"value":"/ of `self` instead.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":25921,"byte_end":25943,"line_start":289,"line_end":289,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27068,"byte_end":27075,"line_start":322,"line_end":322,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<T>>::get_mut","value":"fn get_mut<'_>(&'_ mut Self) -> Option<&'_ mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying data, if there are no other\n clones of the `RwLock`.","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying data, if there are no other","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26430,"byte_end":26499,"line_start":304,"line_end":304,"column_start":5,"column_end":74}},{"value":"/ clones of the `RwLock`.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26504,"byte_end":26531,"line_start":305,"line_end":305,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26536,"byte_end":26539,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking takes","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26544,"byte_end":26617,"line_start":307,"line_end":307,"column_start":5,"column_end":78}},{"value":"/ place -- the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26622,"byte_end":26691,"line_start":308,"line_end":308,"column_start":5,"column_end":74}},{"value":"/ However, if the `RwLock` has already been cloned, then `None` will be","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26696,"byte_end":26769,"line_start":309,"line_end":309,"column_start":5,"column_end":78}},{"value":"/ returned instead.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26774,"byte_end":26795,"line_start":310,"line_end":310,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26800,"byte_end":26803,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26808,"byte_end":26822,"line_start":312,"line_end":312,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26827,"byte_end":26830,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26835,"byte_end":26842,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26847,"byte_end":26874,"line_start":315,"line_end":315,"column_start":5,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26879,"byte_end":26896,"line_start":316,"line_end":316,"column_start":5,"column_end":22}},{"value":"/ let mut lock = RwLock::<u32>::new(0);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26901,"byte_end":26942,"line_start":317,"line_end":317,"column_start":5,"column_end":46}},{"value":"/ *lock.get_mut().unwrap() += 5;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26947,"byte_end":26981,"line_start":318,"line_end":318,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lock.try_unwrap().unwrap(), 5);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26986,"byte_end":27032,"line_start":319,"line_end":319,"column_start":5,"column_end":51}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27037,"byte_end":27044,"line_start":320,"line_end":320,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27049,"byte_end":27056,"line_start":321,"line_end":321,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28076,"byte_end":28080,"line_start":352,"line_end":352,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<T>>::read","value":"fn read<'_>(&'_ Self) -> RwLockReadFut<T>","parent":null,"children":[],"decl_id":null,"docs":" Acquire the `RwLock` nonexclusively, read-only, blocking the task in the\n meantime.","sig":null,"attributes":[{"value":"/ Acquire the `RwLock` nonexclusively, read-only, blocking the task in the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27487,"byte_end":27563,"line_start":334,"line_end":334,"column_start":5,"column_end":81}},{"value":"/ meantime.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27568,"byte_end":27581,"line_start":335,"line_end":335,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27586,"byte_end":27589,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ When the returned `Future` is ready, then this task will have read-only","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27594,"byte_end":27669,"line_start":337,"line_end":337,"column_start":5,"column_end":80}},{"value":"/ access to the protected data.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27674,"byte_end":27707,"line_start":338,"line_end":338,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27712,"byte_end":27715,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27720,"byte_end":27734,"line_start":340,"line_end":340,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27739,"byte_end":27746,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27751,"byte_end":27778,"line_start":342,"line_end":342,"column_start":5,"column_end":32}},{"value":"/ # use futures::executor::block_on;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27783,"byte_end":27821,"line_start":343,"line_end":343,"column_start":5,"column_end":43}},{"value":"/ # use futures::{Future, FutureExt};","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27826,"byte_end":27865,"line_start":344,"line_end":344,"column_start":5,"column_end":44}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27870,"byte_end":27887,"line_start":345,"line_end":345,"column_start":5,"column_end":22}},{"value":"/ let rwlock = RwLock::<u32>::new(42);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27892,"byte_end":27932,"line_start":346,"line_end":346,"column_start":5,"column_end":45}},{"value":"/ let fut = rwlock.read().map(|mut guard| { *guard });","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27937,"byte_end":27993,"line_start":347,"line_end":347,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(block_on(fut), 42);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":27998,"byte_end":28032,"line_start":348,"line_end":348,"column_start":5,"column_end":39}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28037,"byte_end":28044,"line_start":349,"line_end":349,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28049,"byte_end":28052,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28057,"byte_end":28064,"line_start":351,"line_end":351,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28807,"byte_end":28812,"line_start":375,"line_end":375,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<T>>::write","value":"fn write<'_>(&'_ Self) -> RwLockWriteFut<T>","parent":null,"children":[],"decl_id":null,"docs":" Acquire the `RwLock` exclusively, read-write, blocking the task in the\n meantime.","sig":null,"attributes":[{"value":"/ Acquire the `RwLock` exclusively, read-write, blocking the task in the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28177,"byte_end":28251,"line_start":356,"line_end":356,"column_start":5,"column_end":79}},{"value":"/ meantime.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28256,"byte_end":28269,"line_start":357,"line_end":357,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28274,"byte_end":28277,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ When the returned `Future` is ready, then this task will have read-write","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28282,"byte_end":28358,"line_start":359,"line_end":359,"column_start":5,"column_end":81}},{"value":"/ access to the protected data.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28363,"byte_end":28396,"line_start":360,"line_end":360,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28401,"byte_end":28404,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28409,"byte_end":28423,"line_start":362,"line_end":362,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28428,"byte_end":28435,"line_start":363,"line_end":363,"column_start":5,"column_end":12}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28440,"byte_end":28467,"line_start":364,"line_end":364,"column_start":5,"column_end":32}},{"value":"/ # use futures::executor::block_on;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28472,"byte_end":28510,"line_start":365,"line_end":365,"column_start":5,"column_end":43}},{"value":"/ # use futures::{Future, FutureExt};","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28515,"byte_end":28554,"line_start":366,"line_end":366,"column_start":5,"column_end":44}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28559,"byte_end":28576,"line_start":367,"line_end":367,"column_start":5,"column_end":22}},{"value":"/ let rwlock = RwLock::<u32>::new(42);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28581,"byte_end":28621,"line_start":368,"line_end":368,"column_start":5,"column_end":45}},{"value":"/ let fut = rwlock.write().map(|mut guard| { *guard = 5;});","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28626,"byte_end":28687,"line_start":369,"line_end":369,"column_start":5,"column_end":66}},{"value":"/ block_on(fut);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28692,"byte_end":28710,"line_start":370,"line_end":370,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(rwlock.try_unwrap().unwrap(), 5);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28715,"byte_end":28763,"line_start":371,"line_end":371,"column_start":5,"column_end":53}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28768,"byte_end":28775,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28780,"byte_end":28783,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28788,"byte_end":28795,"line_start":374,"line_end":374,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29426,"byte_end":29434,"line_start":396,"line_end":396,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<T>>::try_read","value":"fn try_read<'_>(&'_ Self) -> Result<RwLockReadGuard<T>, TryLockError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire the `RwLock` nonexclusively.","sig":null,"attributes":[{"value":"/ Attempts to acquire the `RwLock` nonexclusively.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28911,"byte_end":28963,"line_start":379,"line_end":379,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28968,"byte_end":28971,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ If the operation would block, returns `Err` instead.  Otherwise, returns","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":28976,"byte_end":29052,"line_start":381,"line_end":381,"column_start":5,"column_end":81}},{"value":"/ a guard (not a `Future`).","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29057,"byte_end":29086,"line_start":382,"line_end":382,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29091,"byte_end":29094,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29099,"byte_end":29113,"line_start":384,"line_end":384,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29118,"byte_end":29125,"line_start":385,"line_end":385,"column_start":5,"column_end":12}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29130,"byte_end":29157,"line_start":386,"line_end":386,"column_start":5,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29162,"byte_end":29179,"line_start":387,"line_end":387,"column_start":5,"column_end":22}},{"value":"/ let mut lock = RwLock::<u32>::new(5);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29184,"byte_end":29225,"line_start":388,"line_end":388,"column_start":5,"column_end":46}},{"value":"/ let r = match lock.try_read() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29230,"byte_end":29265,"line_start":389,"line_end":389,"column_start":5,"column_end":40}},{"value":"/     Ok(guard) => *guard,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29270,"byte_end":29298,"line_start":390,"line_end":390,"column_start":5,"column_end":33}},{"value":"/     Err(_) => panic!(\"Better luck next time!\")","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29303,"byte_end":29353,"line_start":391,"line_end":391,"column_start":5,"column_end":55}},{"value":"/ };","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29358,"byte_end":29364,"line_start":392,"line_end":392,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(5, r);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29369,"byte_end":29390,"line_start":393,"line_end":393,"column_start":5,"column_end":26}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29395,"byte_end":29402,"line_start":394,"line_end":394,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29407,"byte_end":29414,"line_start":395,"line_end":395,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":30303,"byte_end":30312,"line_start":423,"line_end":423,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<T>>::try_write","value":"fn try_write<'_>(&'_ Self) -> Result<RwLockWriteGuard<T>, TryLockError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire the `RwLock` exclusively.","sig":null,"attributes":[{"value":"/ Attempts to acquire the `RwLock` exclusively.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29764,"byte_end":29813,"line_start":406,"line_end":406,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29818,"byte_end":29821,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ If the operation would block, returns `Err` instead.  Otherwise, returns","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29826,"byte_end":29902,"line_start":408,"line_end":408,"column_start":5,"column_end":81}},{"value":"/ a guard (not a `Future`).","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29907,"byte_end":29936,"line_start":409,"line_end":409,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29941,"byte_end":29944,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29949,"byte_end":29963,"line_start":411,"line_end":411,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29968,"byte_end":29975,"line_start":412,"line_end":412,"column_start":5,"column_end":12}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":29980,"byte_end":30007,"line_start":413,"line_end":413,"column_start":5,"column_end":32}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":30012,"byte_end":30029,"line_start":414,"line_end":414,"column_start":5,"column_end":22}},{"value":"/ let mut lock = RwLock::<u32>::new(5);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":30034,"byte_end":30075,"line_start":415,"line_end":415,"column_start":5,"column_end":46}},{"value":"/ match lock.try_write() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":30080,"byte_end":30108,"line_start":416,"line_end":416,"column_start":5,"column_end":33}},{"value":"/     Ok(mut guard) => *guard += 5,","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":30113,"byte_end":30150,"line_start":417,"line_end":417,"column_start":5,"column_end":42}},{"value":"/     Err(_) => panic!(\"Better luck next time!\")","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":30155,"byte_end":30205,"line_start":418,"line_end":418,"column_start":5,"column_end":55}},{"value":"/ }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":30210,"byte_end":30215,"line_start":419,"line_end":419,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(10, lock.try_unwrap().unwrap());","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":30220,"byte_end":30267,"line_start":420,"line_end":420,"column_start":5,"column_end":52}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":30272,"byte_end":30279,"line_start":421,"line_end":421,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":30284,"byte_end":30291,"line_start":422,"line_end":422,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33417,"byte_end":33426,"line_start":506,"line_end":506,"column_start":12,"column_end":21},"name":"with_read","qualname":"<RwLock<T>>::with_read","value":"fn with_read<B, F, R, '_>(&'_ Self, F) -> /*impl Trait*/ where\nF: FnOnce(RwLockReadGuard<T>) -> B + Send + 'static, B: Future<Output = R> +\nSend + 'static, R: Send + 'static, T: Send","parent":null,"children":[],"decl_id":null,"docs":" Acquires a `RwLock` nonexclusively and performs a computation on its\n guarded value in a separate task.  Returns a `Future` containing the\n result of the computation.","sig":null,"attributes":[{"value":"/ Acquires a `RwLock` nonexclusively and performs a computation on its","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32145,"byte_end":32217,"line_start":475,"line_end":475,"column_start":5,"column_end":77}},{"value":"/ guarded value in a separate task.  Returns a `Future` containing the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32222,"byte_end":32294,"line_start":476,"line_end":476,"column_start":5,"column_end":77}},{"value":"/ result of the computation.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32299,"byte_end":32329,"line_start":477,"line_end":477,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32334,"byte_end":32337,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ When using Tokio, this method will often hold the `RwLock` for less time","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32342,"byte_end":32418,"line_start":479,"line_end":479,"column_start":5,"column_end":81}},{"value":"/ than chaining a computation to [`read`](#method.read).  The reason is","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32423,"byte_end":32496,"line_start":480,"line_end":480,"column_start":5,"column_end":78}},{"value":"/ that Tokio polls all tasks promptly upon notification.  However, Tokio","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32501,"byte_end":32575,"line_start":481,"line_end":481,"column_start":5,"column_end":79}},{"value":"/ does not guarantee that it will poll all futures promptly when their","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32580,"byte_end":32652,"line_start":482,"line_end":482,"column_start":5,"column_end":77}},{"value":"/ owning task gets notified.  So it's best to hold `RwLock`s within their","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32657,"byte_end":32732,"line_start":483,"line_end":483,"column_start":5,"column_end":80}},{"value":"/ own tasks, lest their continuations get blocked by slow stacked","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32737,"byte_end":32804,"line_start":484,"line_end":484,"column_start":5,"column_end":72}},{"value":"/ combinators.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32809,"byte_end":32825,"line_start":485,"line_end":485,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32830,"byte_end":32833,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32838,"byte_end":32852,"line_start":487,"line_end":487,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32857,"byte_end":32860,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32865,"byte_end":32872,"line_start":489,"line_end":489,"column_start":5,"column_end":12}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32877,"byte_end":32904,"line_start":490,"line_end":490,"column_start":5,"column_end":32}},{"value":"/ # use futures::{Future, future::ready};","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32909,"byte_end":32952,"line_start":491,"line_end":491,"column_start":5,"column_end":48}},{"value":"/ # use tokio::runtime::Runtime;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32957,"byte_end":32991,"line_start":492,"line_end":492,"column_start":5,"column_end":39}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32996,"byte_end":33013,"line_start":493,"line_end":493,"column_start":5,"column_end":22}},{"value":"/ let rwlock = RwLock::<u32>::new(5);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33018,"byte_end":33057,"line_start":494,"line_end":494,"column_start":5,"column_end":44}},{"value":"/ let mut rt = Runtime::new().unwrap();","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33062,"byte_end":33103,"line_start":495,"line_end":495,"column_start":5,"column_end":46}},{"value":"/ let r = rt.block_on(async {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33108,"byte_end":33139,"line_start":496,"line_end":496,"column_start":5,"column_end":36}},{"value":"/     rwlock.with_read(|mut guard| {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33144,"byte_end":33182,"line_start":497,"line_end":497,"column_start":5,"column_end":43}},{"value":"/         ready(*guard)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33187,"byte_end":33212,"line_start":498,"line_end":498,"column_start":5,"column_end":30}},{"value":"/     }).await","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33217,"byte_end":33233,"line_start":499,"line_end":499,"column_start":5,"column_end":21}},{"value":"/ });","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33238,"byte_end":33245,"line_start":500,"line_end":500,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(r, 5);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33250,"byte_end":33271,"line_start":501,"line_end":501,"column_start":5,"column_end":26}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33276,"byte_end":33283,"line_start":502,"line_end":502,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33288,"byte_end":33295,"line_start":503,"line_end":503,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33300,"byte_end":33352,"line_start":504,"line_end":504,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34682,"byte_end":34697,"line_start":546,"line_end":546,"column_start":12,"column_end":27},"name":"with_read_local","qualname":"<RwLock<T>>::with_read_local","value":"fn with_read_local<B, F, R, '_>(&'_ Self, F) -> /*impl Trait*/ where\nF: FnOnce(RwLockReadGuard<T>) -> B + 'static + Unpin, B: Future<Output = R> +\n'static, R: 'static","parent":null,"children":[],"decl_id":null,"docs":" Like [`with_read`](#method.with_read) but for Futures that aren't\n `Send`.  Spawns a new task on a single-threaded Runtime to complete the\n Future.","sig":null,"attributes":[{"value":"/ Like [`with_read`](#method.with_read) but for Futures that aren't","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33844,"byte_end":33913,"line_start":521,"line_end":521,"column_start":5,"column_end":74}},{"value":"/ `Send`.  Spawns a new task on a single-threaded Runtime to complete the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33918,"byte_end":33993,"line_start":522,"line_end":522,"column_start":5,"column_end":80}},{"value":"/ Future.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":33998,"byte_end":34009,"line_start":523,"line_end":523,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34014,"byte_end":34017,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34022,"byte_end":34036,"line_start":525,"line_end":525,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34041,"byte_end":34044,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34049,"byte_end":34056,"line_start":527,"line_end":527,"column_start":5,"column_end":12}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34061,"byte_end":34088,"line_start":528,"line_end":528,"column_start":5,"column_end":32}},{"value":"/ # use futures::{Future, future::ready};","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34093,"byte_end":34136,"line_start":529,"line_end":529,"column_start":5,"column_end":48}},{"value":"/ # use std::rc::Rc;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34141,"byte_end":34163,"line_start":530,"line_end":530,"column_start":5,"column_end":27}},{"value":"/ # use tokio::runtime::Runtime;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34168,"byte_end":34202,"line_start":531,"line_end":531,"column_start":5,"column_end":39}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34207,"byte_end":34224,"line_start":532,"line_end":532,"column_start":5,"column_end":22}},{"value":"/ // Note: Rc is not `Send`","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34229,"byte_end":34258,"line_start":533,"line_end":533,"column_start":5,"column_end":34}},{"value":"/ let rwlock = RwLock::<Rc<u32>>::new(Rc::new(5));","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34263,"byte_end":34315,"line_start":534,"line_end":534,"column_start":5,"column_end":57}},{"value":"/ let mut rt = Runtime::new().unwrap();","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34320,"byte_end":34361,"line_start":535,"line_end":535,"column_start":5,"column_end":46}},{"value":"/ let r = rt.block_on(async {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34366,"byte_end":34397,"line_start":536,"line_end":536,"column_start":5,"column_end":36}},{"value":"/     rwlock.with_read_local(|mut guard| {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34402,"byte_end":34446,"line_start":537,"line_end":537,"column_start":5,"column_end":49}},{"value":"/         ready(**guard)","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34451,"byte_end":34477,"line_start":538,"line_end":538,"column_start":5,"column_end":31}},{"value":"/     }).await","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34482,"byte_end":34498,"line_start":539,"line_end":539,"column_start":5,"column_end":21}},{"value":"/ });","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34503,"byte_end":34510,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(r, 5);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34515,"byte_end":34536,"line_start":541,"line_end":541,"column_start":5,"column_end":26}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34541,"byte_end":34548,"line_start":542,"line_end":542,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34553,"byte_end":34560,"line_start":543,"line_end":543,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":34565,"byte_end":34617,"line_start":544,"line_end":544,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36496,"byte_end":36506,"line_start":596,"line_end":596,"column_start":12,"column_end":22},"name":"with_write","qualname":"<RwLock<T>>::with_write","value":"fn with_write<B, F, R, '_>(&'_ Self, F) -> /*impl Trait*/ where\nF: FnOnce(RwLockWriteGuard<T>) -> B + Send + 'static, B: Future<Output = R> +\nSend + 'static, R: Send + 'static, T: Send","parent":null,"children":[],"decl_id":null,"docs":" Acquires a `RwLock` exclusively and performs a computation on its\n guarded value in a separate task.  Returns a `Future` containing the\n result of the computation.","sig":null,"attributes":[{"value":"/ Acquires a `RwLock` exclusively and performs a computation on its","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35172,"byte_end":35241,"line_start":564,"line_end":564,"column_start":5,"column_end":74}},{"value":"/ guarded value in a separate task.  Returns a `Future` containing the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35246,"byte_end":35318,"line_start":565,"line_end":565,"column_start":5,"column_end":77}},{"value":"/ result of the computation.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35323,"byte_end":35353,"line_start":566,"line_end":566,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35358,"byte_end":35361,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ When using Tokio, this method will often hold the `RwLock` for less time","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35366,"byte_end":35442,"line_start":568,"line_end":568,"column_start":5,"column_end":81}},{"value":"/ than chaining a computation to [`write`](#method.write).  The reason is","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35447,"byte_end":35522,"line_start":569,"line_end":569,"column_start":5,"column_end":80}},{"value":"/ that Tokio polls all tasks promptly upon notification.  However, Tokio","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35527,"byte_end":35601,"line_start":570,"line_end":570,"column_start":5,"column_end":79}},{"value":"/ does not guarantee that it will poll all futures promptly when their","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35606,"byte_end":35678,"line_start":571,"line_end":571,"column_start":5,"column_end":77}},{"value":"/ owning task gets notified.  So it's best to hold `RwLock`s within their","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35683,"byte_end":35758,"line_start":572,"line_end":572,"column_start":5,"column_end":80}},{"value":"/ own tasks, lest their continuations get blocked by slow stacked","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35763,"byte_end":35830,"line_start":573,"line_end":573,"column_start":5,"column_end":72}},{"value":"/ combinators.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35835,"byte_end":35851,"line_start":574,"line_end":574,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35856,"byte_end":35859,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35864,"byte_end":35878,"line_start":576,"line_end":576,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35883,"byte_end":35886,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35891,"byte_end":35898,"line_start":578,"line_end":578,"column_start":5,"column_end":12}},{"value":"/ # use futures::{Future, future::ready};","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35903,"byte_end":35946,"line_start":579,"line_end":579,"column_start":5,"column_end":48}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35951,"byte_end":35978,"line_start":580,"line_end":580,"column_start":5,"column_end":32}},{"value":"/ # use tokio::runtime::Runtime;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":35983,"byte_end":36017,"line_start":581,"line_end":581,"column_start":5,"column_end":39}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36022,"byte_end":36039,"line_start":582,"line_end":582,"column_start":5,"column_end":22}},{"value":"/ let rwlock = RwLock::<u32>::new(0);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36044,"byte_end":36083,"line_start":583,"line_end":583,"column_start":5,"column_end":44}},{"value":"/ let mut rt = Runtime::new().unwrap();","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36088,"byte_end":36129,"line_start":584,"line_end":584,"column_start":5,"column_end":46}},{"value":"/ let r = rt.block_on(async {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36134,"byte_end":36165,"line_start":585,"line_end":585,"column_start":5,"column_end":36}},{"value":"/     rwlock.with_write(|mut guard| {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36170,"byte_end":36209,"line_start":586,"line_end":586,"column_start":5,"column_end":44}},{"value":"/         *guard += 5;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36214,"byte_end":36238,"line_start":587,"line_end":587,"column_start":5,"column_end":29}},{"value":"/         ready(())","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36243,"byte_end":36264,"line_start":588,"line_end":588,"column_start":5,"column_end":26}},{"value":"/     }).await","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36269,"byte_end":36285,"line_start":589,"line_end":589,"column_start":5,"column_end":21}},{"value":"/ });","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36290,"byte_end":36297,"line_start":590,"line_end":590,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(rwlock.try_unwrap().unwrap(), 5);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36302,"byte_end":36350,"line_start":591,"line_end":591,"column_start":5,"column_end":53}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36355,"byte_end":36362,"line_start":592,"line_end":592,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36367,"byte_end":36374,"line_start":593,"line_end":593,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36379,"byte_end":36431,"line_start":594,"line_end":594,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37847,"byte_end":37863,"line_start":637,"line_end":637,"column_start":12,"column_end":28},"name":"with_write_local","qualname":"<RwLock<T>>::with_write_local","value":"fn with_write_local<B, F, R, '_>(&'_ Self, F) -> /*impl Trait*/ where\nF: FnOnce(RwLockWriteGuard<T>) -> B + 'static + Unpin, B: Future<Output = R> +\n'static, R: 'static","parent":null,"children":[],"decl_id":null,"docs":" Like [`with_write`](#method.with_write) but for Futures that aren't\n `Send`.  Spawns a new task on a single-threaded Runtime to complete the\n Future.","sig":null,"attributes":[{"value":"/ Like [`with_write`](#method.with_write) but for Futures that aren't","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":36926,"byte_end":36997,"line_start":611,"line_end":611,"column_start":5,"column_end":76}},{"value":"/ `Send`.  Spawns a new task on a single-threaded Runtime to complete the","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37002,"byte_end":37077,"line_start":612,"line_end":612,"column_start":5,"column_end":80}},{"value":"/ Future.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37082,"byte_end":37093,"line_start":613,"line_end":613,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37098,"byte_end":37101,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37106,"byte_end":37120,"line_start":615,"line_end":615,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37125,"byte_end":37128,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37133,"byte_end":37140,"line_start":617,"line_end":617,"column_start":5,"column_end":12}},{"value":"/ # use futures::{Future, future::ready};","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37145,"byte_end":37188,"line_start":618,"line_end":618,"column_start":5,"column_end":48}},{"value":"/ # use futures_locks::*;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37193,"byte_end":37220,"line_start":619,"line_end":619,"column_start":5,"column_end":32}},{"value":"/ # use std::rc::Rc;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37225,"byte_end":37247,"line_start":620,"line_end":620,"column_start":5,"column_end":27}},{"value":"/ # use tokio::runtime::Runtime;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37252,"byte_end":37286,"line_start":621,"line_end":621,"column_start":5,"column_end":39}},{"value":"/ # fn main() {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37291,"byte_end":37308,"line_start":622,"line_end":622,"column_start":5,"column_end":22}},{"value":"/ // Note: Rc is not `Send`","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37313,"byte_end":37342,"line_start":623,"line_end":623,"column_start":5,"column_end":34}},{"value":"/ let rwlock = RwLock::<Rc<u32>>::new(Rc::new(0));","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37347,"byte_end":37399,"line_start":624,"line_end":624,"column_start":5,"column_end":57}},{"value":"/ let mut rt = Runtime::new().unwrap();","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37404,"byte_end":37445,"line_start":625,"line_end":625,"column_start":5,"column_end":46}},{"value":"/ let r = rt.block_on(async {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37450,"byte_end":37481,"line_start":626,"line_end":626,"column_start":5,"column_end":36}},{"value":"/     rwlock.with_write_local(|mut guard| {","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37486,"byte_end":37531,"line_start":627,"line_end":627,"column_start":5,"column_end":50}},{"value":"/         *Rc::get_mut(&mut *guard).unwrap() += 5;","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37536,"byte_end":37588,"line_start":628,"line_end":628,"column_start":5,"column_end":57}},{"value":"/         ready(())","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37593,"byte_end":37614,"line_start":629,"line_end":629,"column_start":5,"column_end":26}},{"value":"/     }).await","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37619,"byte_end":37635,"line_start":630,"line_end":630,"column_start":5,"column_end":21}},{"value":"/ });","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37640,"byte_end":37647,"line_start":631,"line_end":631,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(*rwlock.try_unwrap().unwrap(), 5);","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37652,"byte_end":37701,"line_start":632,"line_end":632,"column_start":5,"column_end":54}},{"value":"/ # }","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37706,"byte_end":37713,"line_start":633,"line_end":633,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37718,"byte_end":37725,"line_start":634,"line_end":634,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"tokio\", all(docsrs, rustdoc)))","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":37730,"byte_end":37782,"line_start":635,"line_end":635,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":389},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":1440,"byte_end":1452,"line_start":51,"line_end":51,"column_start":12,"column_end":24},"name":"TryLockError","qualname":"::TryLockError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The lock could not be acquired at this time because the operation would\n otherwise block.\n","sig":null,"attributes":[{"value":"/ The lock could not be acquired at this time because the operation would","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":1302,"byte_end":1377,"line_start":48,"line_end":48,"column_start":1,"column_end":76}},{"value":"/ otherwise block.","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":1378,"byte_end":1398,"line_start":49,"line_end":49,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":1499,"byte_end":1502,"line_start":54,"line_end":54,"column_start":8,"column_end":11},"name":"fmt","qualname":"<TryLockError as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10295},"children":[],"decl_id":{"krate":2,"index":10296},"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2233,"byte_end":2243,"line_start":24,"line_end":24,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2338,"byte_end":2348,"line_start":30,"line_end":30,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2489,"byte_end":2499,"line_start":38,"line_end":38,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2758,"byte_end":2766,"line_start":50,"line_end":50,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2892,"byte_end":2900,"line_start":56,"line_end":56,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":4004,"byte_end":4012,"line_start":87,"line_end":87,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6605,"byte_end":6614,"line_start":161,"line_end":161,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6937,"byte_end":6946,"line_start":172,"line_end":172,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7275,"byte_end":7284,"line_start":181,"line_end":181,"column_start":40,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7330,"byte_end":7339,"line_start":182,"line_end":182,"column_start":40,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8260,"byte_end":8265,"line_start":211,"line_end":211,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8365,"byte_end":8370,"line_start":217,"line_end":217,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":9443,"byte_end":9448,"line_start":247,"line_end":247,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":12425,"byte_end":12430,"line_start":338,"line_end":338,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":101},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":15731,"byte_end":15736,"line_start":433,"line_end":433,"column_start":40,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":15782,"byte_end":15787,"line_start":434,"line_end":434,"column_start":40,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":16749,"byte_end":16764,"line_start":24,"line_end":24,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":16902,"byte_end":16917,"line_start":32,"line_end":32,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17250,"byte_end":17266,"line_start":45,"line_end":45,"column_start":27,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17408,"byte_end":17424,"line_start":53,"line_end":53,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17556,"byte_end":17572,"line_start":59,"line_end":59,"column_start":26,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17817,"byte_end":17830,"line_start":71,"line_end":71,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17964,"byte_end":17977,"line_start":77,"line_end":77,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":19092,"byte_end":19105,"line_start":108,"line_end":108,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":20973,"byte_end":20987,"line_start":154,"line_end":154,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":21122,"byte_end":21136,"line_start":160,"line_end":160,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":22252,"byte_end":22266,"line_start":191,"line_end":191,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":25099,"byte_end":25105,"line_start":265,"line_end":265,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":25207,"byte_end":25213,"line_start":271,"line_end":271,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26414,"byte_end":26420,"line_start":303,"line_end":303,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32129,"byte_end":32135,"line_start":474,"line_end":474,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":236},{"krate":0,"index":243},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":38570,"byte_end":38576,"line_start":659,"line_end":659,"column_start":40,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":38629,"byte_end":38635,"line_start":660,"line_end":660,"column_start":47,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":1477,"byte_end":1489,"line_start":53,"line_end":53,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":1657,"byte_end":1669,"line_start":59,"line_end":59,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2233,"byte_end":2243,"line_start":24,"line_end":24,"column_start":26,"column_end":36},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":311},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2338,"byte_end":2348,"line_start":30,"line_end":30,"column_start":27,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":311},"to":{"krate":2,"index":3486}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2489,"byte_end":2499,"line_start":38,"line_end":38,"column_start":30,"column_end":40},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":311},"to":{"krate":2,"index":3499}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2758,"byte_end":2766,"line_start":50,"line_end":50,"column_start":17,"column_end":25},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":60},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":2892,"byte_end":2900,"line_start":56,"line_end":56,"column_start":26,"column_end":34},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":60},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":4004,"byte_end":4012,"line_start":87,"line_end":87,"column_start":28,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":60},"to":{"krate":2,"index":13763}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6605,"byte_end":6614,"line_start":161,"line_end":161,"column_start":17,"column_end":26},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":6937,"byte_end":6946,"line_start":172,"line_end":172,"column_start":27,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":334},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7275,"byte_end":7284,"line_start":181,"line_end":181,"column_start":40,"column_end":49},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":334},"to":{"krate":2,"index":3263}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":7330,"byte_end":7339,"line_start":182,"line_end":182,"column_start":40,"column_end":49},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":334},"to":{"krate":2,"index":3275}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8260,"byte_end":8265,"line_start":211,"line_end":211,"column_start":27,"column_end":32},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":340},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":8365,"byte_end":8370,"line_start":217,"line_end":217,"column_start":9,"column_end":14},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":9443,"byte_end":9448,"line_start":247,"line_end":247,"column_start":17,"column_end":22},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":12425,"byte_end":12430,"line_start":338,"line_end":338,"column_start":27,"column_end":32},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":15731,"byte_end":15736,"line_start":433,"line_end":433,"column_start":40,"column_end":45},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":340},"to":{"krate":2,"index":3263}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/mutex.rs","byte_start":15782,"byte_end":15787,"line_start":434,"line_end":434,"column_start":40,"column_end":45},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":340},"to":{"krate":2,"index":3275}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":16749,"byte_end":16764,"line_start":24,"line_end":24,"column_start":27,"column_end":42},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":349},"to":{"krate":2,"index":3486}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":16902,"byte_end":16917,"line_start":32,"line_end":32,"column_start":26,"column_end":41},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":349},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17250,"byte_end":17266,"line_start":45,"line_end":45,"column_start":27,"column_end":43},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":3486}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17408,"byte_end":17424,"line_start":53,"line_end":53,"column_start":30,"column_end":46},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":3499}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17556,"byte_end":17572,"line_start":59,"line_end":59,"column_start":26,"column_end":42},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17817,"byte_end":17830,"line_start":71,"line_end":71,"column_start":17,"column_end":30},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":17964,"byte_end":17977,"line_start":77,"line_end":77,"column_start":26,"column_end":39},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":183},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":19092,"byte_end":19105,"line_start":108,"line_end":108,"column_start":28,"column_end":41},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":183},"to":{"krate":2,"index":13763}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":20973,"byte_end":20987,"line_start":154,"line_end":154,"column_start":17,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":21122,"byte_end":21136,"line_start":160,"line_end":160,"column_start":26,"column_end":40},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":197},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":22252,"byte_end":22266,"line_start":191,"line_end":191,"column_start":28,"column_end":42},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":197},"to":{"krate":2,"index":13763}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":25099,"byte_end":25105,"line_start":265,"line_end":265,"column_start":27,"column_end":33},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":380},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":25207,"byte_end":25213,"line_start":271,"line_end":271,"column_start":9,"column_end":15},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":26414,"byte_end":26420,"line_start":303,"line_end":303,"column_start":17,"column_end":23},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":32129,"byte_end":32135,"line_start":474,"line_end":474,"column_start":27,"column_end":33},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":38570,"byte_end":38576,"line_start":659,"line_end":659,"column_start":40,"column_end":46},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":380},"to":{"krate":2,"index":3263}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/rwlock.rs","byte_start":38629,"byte_end":38635,"line_start":660,"line_end":660,"column_start":47,"column_end":53},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":380},"to":{"krate":2,"index":3275}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":1477,"byte_end":1489,"line_start":53,"line_end":53,"column_start":23,"column_end":35},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":389},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/turjachowdhury/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-locks-0.7.0/src/lib.rs","byte_start":1657,"byte_end":1669,"line_start":59,"line_end":59,"column_start":23,"column_end":35},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":389},"to":{"krate":1,"index":2576}}]}